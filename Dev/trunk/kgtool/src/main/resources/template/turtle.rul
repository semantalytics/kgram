<?xml version='1.0' encoding='UTF-8'?>
<!--
SPARQL Template Transformation
Olivier Corby - Wimmics - Inria UNS CNRS I3S
Fri Apr 11 14:28:34 CEST 2014
-->
<rdf:RDF  xmlns:rdf='http://www.w3.org/1999/02/22-rdf-syntax-ns#' 
  xmlns='http://ns.inria.fr/edelweiss/2011/rule#'>
<rule>
<body>
<![CDATA[
#
# Turtle Pretty Printer
# Olivier Corby, Wimmics Inria I3S, 2013
#
template st:start {
  ?x
  ; separator = "\n\n"
}
where {
  select distinct ?x where { 
    ?x ?p ?y     
    filter ( isURI(?x) || not exists { ?z ?q ?x } )
  }
}
order by ?x
]]>
</body>
</rule>

<rule>
<body>
<![CDATA[
#
# Turtle Pretty Printer
# Olivier Corby, Wimmics Inria I3S, 2013
#
template st:type {
  "a "
  group {
          st:uri(?c)           
          ; separator = ", " 
   }
}
where {
  ?in rdf:type ?c 
}
]]>
</body>
</rule>

<rule>
<body>
<![CDATA[
#
# Turtle Pretty Printer
# Olivier Corby, Wimmics Inria I3S, 2013
#
template st:rdf {
  ?x
  ; separator = "\n\n"
}
where {
  select distinct ?x where { 
    ?x ?p ?y 
    minus {
       ?x a ?t . 
       filter(
	    strstarts(?t, rdf:)
	 || strstarts(?t, rdfs:)
	 || strstarts(?t, owl:)
       )
    }
    
    filter ( isURI(?x) || not exists { ?z ?q ?x } )
  }
}
order by ?x
]]>
</body>
</rule>

<rule>
<body>
<![CDATA[
#
# Turtle Pretty Printer
# Olivier Corby, Wimmics Inria I3S, 2013
#
template st:trig {
  "graph " st:uri(?g) " {\n" 
      group { ?x ; separator = "\n\n" }
  "\n}"
  ; separator = "\n\n"
}
where {
  select distinct ?g ?x where { 
  
    graph ?g { 
      ?x ?p ?y 
      filter ( isURI(?x) || not exists { ?z ?q ?x } )
    }
  }
}
group by ?g
order by ?g ?x
]]>
</body>
</rule>

<rule>
<body>
<![CDATA[
#
# Turtle Pretty Printer
# Olivier Corby, Wimmics Inria I3S, 2013
#
template st:value {
             
	st:uri(?p) " " 
	
        if (bound(?e),   st:call-template(st:list, ?y),
          st:uriLiteral(?y))	
          
        ; separator = " ;\n" 
     
}
where {
  ?in ?p ?y 
  
  filter(?p not in (rdf:type, rdfs:member))
    
  optional { ?y  rdf:first ?e }
}
]]>
</body>
</rule>

<rule>
<body>
<![CDATA[
#
# Turtle Pretty Printer
# Olivier Corby, Wimmics Inria I3S, 2013
#
template st:list {
  "(" 
    group { st:uri(?e) } 
  ")"
  
}
where {
  ?x ?p ?in
  ?in rdf:rest*/rdf:first ?e
}
]]>
</body>
</rule>

<rule>
<body>
<![CDATA[
#
# defaut processing of a variable is st:apply-templates 
#
# Olivier Corby, Wimmics Inria I3S, 2014
#
template st:profile(?in) {
    st:define(st:process(?in) =  st:apply-templates(?in))
}
where {
}
]]>
</body>
</rule>

<rule>
<body>
<![CDATA[
#
# Turtle Pretty Printer
# Olivier Corby, Wimmics Inria I3S, 2013
#
template st:all {
  ?x
  ; separator = "\n\n"
}
where {
  select distinct ?x where { 
    ?x ?p ?y 
    
    filter ( isURI(?x) || not exists { ?z ?q ?x } )
  }
}
order by ?x
]]>
</body>
</rule>

<rule>
<body>
<![CDATA[
#
# Turtle Pretty Printer
# Olivier Corby, Wimmics Inria I3S, 2013
#
template st:rdfs {
  ?x
  ; separator = "\n\n"
}
where {
  select distinct ?x where { 
    
       ?x a ?t . 
       filter(
	    strstarts(?t, rdf:)
	 || strstarts(?t, rdfs:)
	 || strstarts(?t, owl:)
       )
    
    filter ( isURI(?x) || not exists { ?z ?q ?x } )
  }
}
order by ?x
]]>
</body>
</rule>

<rule>
<body>
<![CDATA[
#
# Turtle Pretty Printer
# Olivier Corby, Wimmics Inria I3S, 2013
#
template {
  "["
      st:call-template(st:type, ?in)
      
      if (exists { ?in a ?t ; ?q ?v . filter (?q not in (rdf:type)) }, 
         " ;\n", "")
  
      st:call-template(st:value, ?in)
      
  "]"
}
where {
  ?in ?p ?y 
  
  filter(isBlank(?in))
  
}
limit 1
]]>
</body>
</rule>

<rule>
<body>
<![CDATA[
#
# Turtle Pretty Printer
# Olivier Corby, Wimmics Inria I3S, 2013
#
template {
  st:turtle(?in)
}
where {
  ?x ?p ?in
  filter(isLiteral(?in))
}
limit 1
]]>
</body>
</rule>

<rule>
<body>
<![CDATA[
#
# Turtle Pretty Printer
# Olivier Corby, Wimmics Inria I3S, 2013
#
template {
  st:uri(?in) " "
  
      st:call-template(st:type, ?in)
      
      if (exists { ?in a ?t ; ?q ?v . filter (?q not in (rdf:type)) }, 
         " ;\n", "")
 
      st:call-template(st:value, ?in)
      
      " ."      
}
where {
  ?in ?p ?y 
  
  filter(isUri(?in))
  
}
limit 1
]]>
</body>
</rule>

</rdf:RDF>
