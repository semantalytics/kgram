<?xml version='1.0' encoding='UTF-8'?>
<!--
SPARQL Template Transformation
Olivier Corby - Wimmics - Inria UNS CNRS I3S
Fri Apr 11 14:28:34 CEST 2014
-->
<rdf:RDF  xmlns:rdf='http://www.w3.org/1999/02/22-rdf-syntax-ns#' 
  xmlns='http://ns.inria.fr/edelweiss/2011/rule#'>
<rule>
<body>
<![CDATA[
#
# Generate a two entry HTML table 
# with properties as column and resources as row
# For each resource, generate the row of values for each property
# Associate different colors to successive rows using CSS
#
# Olivier Corby - Wimmics - Inria, UNS, CNRS, I3S
#
template st:start {

'''<html> 
<head>
<style>
  .head  { background-color : aliceBlue}
  .title { font-weight:bold }
  .s1 { background-color : lavender}
  .s2 { background-color : aliceBlue}
</style>
</head>
<body>
<p>
HTML page generated from RDF with SPARQL Template using <a href='http://wimmics.inria.fr/corese'>Corese</a>. <br/>'''

now() 

''' - Wimmics - Inria, UNS, CNRS, I3S.
</p>
<table>
<tr class='head'><td/><td/>'''

  st:call-template(st:head, st:head)
  
"</tr>\n"

  st:call-template(st:body, st:body)

'''</table>
</body>
</html>''' 
}
where {
  
}
]]>
</body>
</rule>

<rule>
<body>
<![CDATA[
template st:line(?x) {
  "<td>" 
     group { 
     if (?o = st:null, "", 
     if (isURI(?o), st:call-template(st:href, ?o),
       replace(replace(st:turtle(?o), "&", "&amp;"), "<", "&lt;"))) 
     }
  "</td>"       
}
where {
  
  { select distinct ?p where {
      ?s ?p ?v
  } order by ?p}
  
  { ?x ?p ?o } union { bind(st:null as ?o) }
  
}
group by ?p
order by ?p
]]>
</body>
</rule>

<rule>
<body>
<![CDATA[
template st:body {
  "<tr class='"  
      if (kg:number() / 2 = round(kg:number() / 2) , "s1", "s2") 
  "'>" 
    "<td>" kg:number() "</td>"
    "<td class='title'>" 
      replace(replace(st:uri(?s), "&", "&amp;"), "<", "&lt;") 
    "</td>"
    
     st:call-template(st:line, ?s)
     
  "</tr>\n"
}
where {
  select distinct ?s where {
      ?s ?p ?o
  }
  order by ?s
}
]]>
</body>
</rule>

<rule>
<body>
<![CDATA[
template st:head {
"<th>"
    replace(st:uri(?p), "<", "&lt;")
"</th>"
}
where {
  select distinct ?p where {
      ?s ?p ?o
  }
  order by ?p
}
]]>
</body>
</rule>

<rule>
<body>
<![CDATA[
template st:href {
  "<a href='" ?in "'>"  
     replace(replace(replace(st:uri(?in), ">", ""), "<", ""), "&", "&amp;")
  "</a>"
}
where {

}
values ?in { UNDEF }
]]>
</body>
</rule>

</rdf:RDF>
