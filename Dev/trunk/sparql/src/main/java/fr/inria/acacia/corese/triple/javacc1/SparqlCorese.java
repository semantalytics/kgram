/* Generated By:JavaCC: Do not edit this line. SparqlCorese.java */
        package fr.inria.acacia.corese.triple.javacc1;

        import org.apache.log4j.Logger;

        import java.util.ArrayList;
        import java.util.Vector;
        import fr.inria.acacia.corese.triple.cst.RDFS;
        import fr.inria.acacia.corese.triple.parser.*;
        import fr.inria.acacia.corese.triple.update.*;


  /**
  * <p>Title: Corese</p>
  * <p>Description: A Semantic Search Engine</p>
  * <p>Copyright: Copyright INRIA (c) 2006</p>
  * <p>Company: INRIA</p>
  * <p>Project: Acacia</p>
  * <br>
  * This file defines the SPARQL/Corese grammar; it's from it, that we create 
  * the 7 others classes, thanks to the JavaCC technology.
  * <br>
  * @author Virginie Bottollier
  */
  public class SparqlCorese implements SparqlCoreseConstants {

    /** An instanciation of the class Parser */
    //Parser parser;
    /** An instanciation of the class ASTQuery (a graph representing the query) */
    ASTQuery astq;
    ASTUpdate astu;
    /** should we say to the user when he uses something deprecated? (option, sort, or, source, as...) */
    boolean printDeprecated = true;

        /** logger from log4j */
        private static Logger logger = Logger.getLogger(SparqlCorese.class);

    /** To show some printings */
    boolean show = false;
    /** To show some printings about the part of the parser which deals with Expression */
    boolean debug2 = show && false;

        /*public void setParser(Parser p) {
    	parser = p;
    }*/

        public void setASTQuery(ASTQuery aq) {
                astq = aq;
        }

        /**
	* @param s1 = the string deprecated
	* @param s2 = how to replace s1
	*/
        public void deprecated(String s1, String s2) {
                if (printDeprecated) {
                        logger.debug("*** \""+s1+"\" is deprecated, you should use \""+s2+"\" instead");
                }
        }

    /**
     * @throws JavaccParseException
     * @throws TokenMgrError
     * @return
     */
    public ASTQuery parse() throws JavaccParseException, TokenMgrError {
        Exp ex;
        astu = ASTUpdate.create();
        try {
        if (astq.isRule()) ex = Rule();
                else ex = Start();
        } catch(ParseException e) {
                throw new JavaccParseException(e);
        }
        if (show)
                for (int i = 0; i<ex.size();i++) {
                        logger.debug("sparql-parser - ex.get("+i+"): "+ex.get(i));
                }
        if (astq.isSelected(ex)) {      // true if get:gui ok
                astq.setSelect();
        } else {
                //ex = null; // Do not do this, because we want to keep triples that are ok
        }
        astq.setBody(ex);
        return astq;
    }

  final public Exp Start() throws ParseException {
               Exp stack;
          stack = new And();
    stack = Query();
    jj_consume_token(0);
          {if (true) return stack;}
    throw new Error("Missing return statement in function");
  }

  final public Exp Rule() throws ParseException {
              Exp stack;
          stack = new And();
    Prolog();
    stack = GroupGraphPattern();
    jj_consume_token(0);
          {if (true) return stack;}
    throw new Error("Missing return statement in function");
  }

  final public Exp Query() throws ParseException {
                Exp stack;
         stack = BasicGraphPattern.create();
    Prolog();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case SELECT:
    case DESCRIBE:
    case CONSTRUCT:
    case ASK:
    case LOAD:
    case CLEAR:
    case DROP:
    case CREATE:
    case ADD:
    case MOVE:
    case COPY:
    case INSERT:
    case DELETE:
    case WITH:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case SELECT:
        stack = SelectQuery();
        break;
      case CONSTRUCT:
        stack = ConstructQuery();
        break;
      case DESCRIBE:
        stack = DescribeQuery();
        break;
      case ASK:
        stack = AskQuery();
        break;
      case LOAD:
      case CLEAR:
      case DROP:
      case CREATE:
      case ADD:
      case MOVE:
      case COPY:
      case INSERT:
      case DELETE:
      case WITH:
        UpdateQuery();
                astq.setResultForm(ASTQuery.QT_UPDATE);
                astq.set(astu);
        break;
      default:
        jj_la1[0] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    default:
      jj_la1[1] = jj_gen;
      ;
    }
    {if (true) return stack;}
    throw new Error("Missing return statement in function");
  }

  final public void Prolog() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case BASE:
      BaseDecl();
      break;
    default:
      jj_la1[2] = jj_gen;
      ;
    }
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PREFIX:
        ;
        break;
      default:
        jj_la1[3] = jj_gen;
        break label_1;
      }
      PrefixDecl();
    }
  }

  final public void BaseDecl() throws ParseException {
                    Token t; String s; Triple triple;
    t = jj_consume_token(BASE);
    s = Q_IRI_ref();
        astq.defBase(s);
  }

  final public void PrefixDecl() throws ParseException {
                      Token t1, t2; String s; Triple triple;
    t1 = jj_consume_token(PREFIX);
    t2 = jj_consume_token(QNAME_NS);
    s = Q_IRI_ref();
        astq.defNamespace(t2.image, s);
  }

// *******************************************************************

// Update
  final public void UpdateQuery() throws ParseException {
                        Exp stack;
    UpdateQuery1();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case SEMICOLON:
      jj_consume_token(SEMICOLON);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case BASE:
      case PREFIX:
      case LOAD:
      case CLEAR:
      case DROP:
      case CREATE:
      case ADD:
      case MOVE:
      case COPY:
      case INSERT:
      case DELETE:
      case WITH:
        Prolog();
        UpdateQuery();
        break;
      default:
        jj_la1[4] = jj_gen;
        ;
      }
      break;
    default:
      jj_la1[5] = jj_gen;
      ;
    }
  }

  final public void UpdateQuery1() throws ParseException {
        Exp stack; Basic ope;
        String graph, uri, target;
        boolean silent, defaut, named, all;
                stack = BasicGraphPattern.create();
                graph = null; uri = null; target = null;
                silent = false;
                defaut = false;
                all = false;
                ope = null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LOAD:
      jj_consume_token(LOAD);
                        ope = Basic.create(Update.LOAD);
      uri = IRIref();
                                                                          ope.setURI(uri);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case INTO:
        jj_consume_token(INTO);
        jj_consume_token(GRAPH);
        graph = IRIref();
                                                   ope.setTarget(graph);
        break;
      default:
        jj_la1[6] = jj_gen;
        ;
      }
      break;
    case CLEAR:
    case DROP:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case CLEAR:
        jj_consume_token(CLEAR);
                                 ope = Basic.create(Update.CLEAR);
        break;
      case DROP:
        jj_consume_token(DROP);
                                                                              ope = Basic.create(Update.DROP);
        break;
      default:
        jj_la1[7] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case SILENT:
        jj_consume_token(SILENT);
                                 ope.setSilent(true);
        break;
      default:
        jj_la1[8] = jj_gen;
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case GRAPH:
        jj_consume_token(GRAPH);
        graph = IRIref();
                                                  ope.setGraph(graph);
        break;
      case DEFAUT:
        jj_consume_token(DEFAUT);
                                 ope.setDefault(true);
        break;
      case NAMED:
        jj_consume_token(NAMED);
                                 ope.setNamed(true);
        break;
      case ALL:
        jj_consume_token(ALL);
                                 ope.setAll(true);
        break;
      default:
        jj_la1[9] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    case CREATE:
      jj_consume_token(CREATE);
                          ope = Basic.create(Update.CREATE);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case SILENT:
        jj_consume_token(SILENT);
                                                                         ope.setSilent(true);
        break;
      default:
        jj_la1[10] = jj_gen;
        ;
      }
      jj_consume_token(GRAPH);
      graph = IRIref();
                                          ope.setGraph(graph);
      break;
    case ADD:
    case MOVE:
    case COPY:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ADD:
        jj_consume_token(ADD);
                         ope = Basic.create(Update.ADD);
        break;
      case MOVE:
        jj_consume_token(MOVE);
                         ope = Basic.create(Update.MOVE);
        break;
      case COPY:
        jj_consume_token(COPY);
                         ope = Basic.create(Update.COPY);
        break;
      default:
        jj_la1[11] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case SILENT:
        jj_consume_token(SILENT);
                           ope.setSilent(true);
        break;
      default:
        jj_la1[12] = jj_gen;
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case GRAPH:
        jj_consume_token(GRAPH);
        graph = IRIref();
                                            ope.setGraph(graph);
        break;
      case DEFAUT:
        jj_consume_token(DEFAUT);
                                                                                         ope.setDefault(true);
        break;
      default:
        jj_la1[13] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      jj_consume_token(TO);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case GRAPH:
        jj_consume_token(GRAPH);
        graph = IRIref();
                                           ope.setTarget(graph);
        break;
      case DEFAUT:
        jj_consume_token(DEFAUT);
                                                                                         ope.setDefault(true);
        break;
      default:
        jj_la1[14] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    default:
      jj_la1[15] = jj_gen;
      if (jj_2_1(2)) {
        DeleteInsertData();
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case INSERT:
        case DELETE:
        case WITH:
          DeleteInsertWhere();
          break;
        default:
          jj_la1[16] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    }
                if (ope!=null) astu.add(ope);
  }

  final public void DeleteInsertData() throws ParseException {
                           Exp exp; Composite ope, upd;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case INSERT:
      jj_consume_token(INSERT);
      jj_consume_token(DATA);
      exp = QuadPattern();
                 ope = Composite.create(Update.INSERT, exp);
      break;
    case DELETE:
      jj_consume_token(DELETE);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case DATA:
        jj_consume_token(DATA);
        exp = QuadPattern();
                         ope = Composite.create(Update.DELETE, exp);
        break;
      case WHERE:
        jj_consume_token(WHERE);
        exp = QuadPattern();
                                upd = Composite.create(Update.COMPOSITE); upd.setBody(exp);
                                ope = Composite.create(Update.DELETE);    ope.setPattern(exp);
                                upd.add(ope);
                                ope = upd;
        break;
      default:
        jj_la1[17] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    default:
      jj_la1[18] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
          astu.add(ope);
  }

// create an AST as a whole
  final public void DeleteInsertWhere() throws ParseException {
                            Exp exp; Composite upd, ope; String uri;
         upd = Composite.create(Update.COMPOSITE);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case WITH:
      jj_consume_token(WITH);
      uri = IRIref();
         upd.setWith(uri);
      break;
    default:
      jj_la1[19] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case DELETE:
      jj_consume_token(DELETE);
      exp = QuadPattern();
                 ope = Composite.create(Update.DELETE); ope.setPattern(exp); upd.add(ope);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case INSERT:
        jj_consume_token(INSERT);
        exp = QuadPattern();
                   ope = Composite.create(Update.INSERT); ope.setPattern(exp); upd.add(ope);
        break;
      default:
        jj_la1[20] = jj_gen;
        ;
      }
      break;
    case INSERT:
      jj_consume_token(INSERT);
      exp = QuadPattern();
             ope = Composite.create(Update.INSERT); ope.setPattern(exp); upd.add(ope);
      break;
    default:
      jj_la1[21] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    label_2:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case USING:
        ;
        break;
      default:
        jj_la1[22] = jj_gen;
        break label_2;
      }
      jj_consume_token(USING);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case Q_IRIref:
      case QNAME_NS:
      case QNAME:
        uri = IRIref();
                                                 upd.addUsing(uri);
        break;
      case NAMED:
        jj_consume_token(NAMED);
        uri = IRIref();
                                                 upd.addNamed(uri);
        break;
      default:
        jj_la1[23] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    jj_consume_token(WHERE);
    exp = GroupGraphPattern();
          upd.setBody(exp); astu.add(upd);
  }

  final public Exp QuadPattern() throws ParseException {
                     Exp stack;
         stack = BasicGraphPattern.create();
    jj_consume_token(LBRACE);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case Q_IRIref:
    case QNAME_NS:
    case QNAME:
    case BLANK_NODE_LABEL:
    case VAR1:
    case VAR2:
    case TRUE:
    case FALSE:
    case INTEGER:
    case DECIMAL:
    case DOUBLE:
    case STRING_LITERAL1:
    case STRING_LITERAL2:
    case STRING_LITERAL_LONG1:
    case STRING_LITERAL_LONG2:
    case LPAREN:
    case LBRACKET:
    case ANON:
      BlockOfTriples(stack);
      break;
    default:
      jj_la1[24] = jj_gen;
      ;
    }
    label_3:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case GRAPH:
        ;
        break;
      default:
        jj_la1[25] = jj_gen;
        break label_3;
      }
      GraphGraphPattern(stack);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case Q_IRIref:
      case QNAME_NS:
      case QNAME:
      case BLANK_NODE_LABEL:
      case VAR1:
      case VAR2:
      case TRUE:
      case FALSE:
      case INTEGER:
      case DECIMAL:
      case DOUBLE:
      case STRING_LITERAL1:
      case STRING_LITERAL2:
      case STRING_LITERAL_LONG1:
      case STRING_LITERAL_LONG2:
      case LPAREN:
      case LBRACKET:
      case ANON:
        BlockOfTriples(stack);
        break;
      default:
        jj_la1[26] = jj_gen;
        ;
      }
    }
    jj_consume_token(RBRACE);
            {if (true) return stack;}
    throw new Error("Missing return statement in function");
  }

// *********************** End Update ********************************************************





// ---- Query type clauses
  final public Exp SelectQuery() throws ParseException {
                      Exp stack;
    jj_consume_token(SELECT);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case DEBUG:
      jj_consume_token(DEBUG);
               astq.setDebug(true);
      break;
    default:
      jj_la1[27] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case NOSORT:
      jj_consume_token(NOSORT);
               astq.setSorted(false);
      break;
    default:
      jj_la1[28] = jj_gen;
      ;
    }
    OneMoreListMerge();
    GroupCountSortDisplayVar();
    Max();
    label_4:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case FROM:
        ;
        break;
      default:
        jj_la1[29] = jj_gen;
        break label_4;
      }
      DatasetClause();
    }
    stack = WhereClause();
    SolutionModifier();
    astq.setResultForm(ASTQuery.QT_SELECT);
    {if (true) return stack;}
    throw new Error("Missing return statement in function");
  }

  final public Exp ConstructQuery() throws ParseException {
                         Exp stack1, stack2;
    jj_consume_token(CONSTRUCT);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case DEBUG:
      jj_consume_token(DEBUG);
             astq.setDebug(true);
      break;
    default:
      jj_la1[30] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LBRACE:
      // with a construct pattern
        stack1 = ConstructTemplate();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case SELECT:
        jj_consume_token(SELECT);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case VAR1:
        case VAR2:
        case LPAREN:
        case STAR:
          SelectVar();
          break;
        default:
          jj_la1[31] = jj_gen;
          ;
        }
        break;
      default:
        jj_la1[32] = jj_gen;
        ;
      }
      label_5:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case FROM:
          ;
          break;
        default:
          jj_la1[33] = jj_gen;
          break label_5;
        }
        DatasetClause();
      }
      stack2 = WhereClause();
      SolutionModifier();
        astq.setConstruct(stack1);      {if (true) return stack2;}
      break;
    case FROM:
    case WHERE:
      label_6:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case FROM:
          ;
          break;
        default:
          jj_la1[34] = jj_gen;
          break label_6;
        }
        DatasetClause();
      }
      jj_consume_token(WHERE);
      stack2 = ConstructTemplate2();
      SolutionModifier();
        astq.duplicateConstruct(stack2);        {if (true) return stack2;}
      break;
    default:
      jj_la1[35] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public Exp DescribeQuery() throws ParseException {
                        Exp stack; Variable v; String s;
    stack = new And();
    jj_consume_token(DESCRIBE);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case DEBUG:
      jj_consume_token(DEBUG);
             astq.setDebug(true);
      break;
    default:
      jj_la1[36] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case Q_IRIref:
    case QNAME_NS:
    case QNAME:
    case VAR1:
    case VAR2:
      label_7:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case VAR1:
        case VAR2:
          v = Var();
                                    astq.setDescribe(v.getName());
          break;
        case Q_IRIref:
        case QNAME_NS:
        case QNAME:
          s = IRIref();
                                         astq.setDescribe(s);
          break;
        default:
          jj_la1[37] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        if (jj_2_2(2)) {
          ;
        } else {
          break label_7;
        }
      }
      break;
    case STAR:
      jj_consume_token(STAR);
                   astq.setDescribeAll(true);
      break;
    default:
      jj_la1[38] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    label_8:
    while (true) {
      if (jj_2_3(2)) {
        ;
      } else {
        break label_8;
      }
      DatasetClause();
    }
    if (jj_2_4(2)) {
      stack = WhereClause();
    } else {
      ;
    }
    SolutionModifier();
    astq.setResultForm(ASTQuery.QT_DESCRIBE);
        {if (true) return stack;}
    throw new Error("Missing return statement in function");
  }

  final public Exp AskQuery() throws ParseException {
                   Exp stack;
    jj_consume_token(ASK);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case DEBUG:
      jj_consume_token(DEBUG);
             astq.setDebug(true);
      break;
    default:
      jj_la1[39] = jj_gen;
      ;
    }
    label_9:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case FROM:
        ;
        break;
      default:
        jj_la1[40] = jj_gen;
        break label_9;
      }
      DatasetClause();
    }
    stack = WhereClause();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case BINDINGS:
      Bindings();
      break;
    default:
      jj_la1[41] = jj_gen;
      ;
    }
        astq.setResultForm(ASTQuery.QT_ASK);
        {if (true) return stack;}
    throw new Error("Missing return statement in function");
  }

  final public Exp DeleteQuery() throws ParseException {
                      Exp stack;
    jj_consume_token(DELETE);
    jj_consume_token(STAR);
    stack = WhereClause();
                astq.setDelete(true);
                astq.setResultForm(ASTQuery.QT_DELETE);
                {if (true) return stack;}
    throw new Error("Missing return statement in function");
  }

// ----

// one more list merge in any order and without list and merge being together
  final public void OneMoreListMerge() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ONE:
      One();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case S_MORE:
      case LIST:
      case MERGE:
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case S_MORE:
          More();
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case LIST:
          case MERGE:
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case LIST:
              List();
              break;
            case MERGE:
              Merge();
              break;
            default:
              jj_la1[42] = jj_gen;
              jj_consume_token(-1);
              throw new ParseException();
            }
            break;
          default:
            jj_la1[43] = jj_gen;
            ;
          }
          break;
        case LIST:
          List();
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case S_MORE:
            More();
            break;
          default:
            jj_la1[44] = jj_gen;
            ;
          }
          break;
        case MERGE:
          Merge();
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case S_MORE:
            More();
            break;
          default:
            jj_la1[45] = jj_gen;
            ;
          }
          break;
        default:
          jj_la1[46] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
      default:
        jj_la1[47] = jj_gen;
        ;
      }
      break;
    case S_MORE:
      More();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ONE:
      case LIST:
      case MERGE:
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case ONE:
          One();
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case LIST:
          case MERGE:
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case LIST:
              List();
              break;
            case MERGE:
              Merge();
              break;
            default:
              jj_la1[48] = jj_gen;
              jj_consume_token(-1);
              throw new ParseException();
            }
            break;
          default:
            jj_la1[49] = jj_gen;
            ;
          }
          break;
        case LIST:
          List();
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case ONE:
            One();
            break;
          default:
            jj_la1[50] = jj_gen;
            ;
          }
          break;
        case MERGE:
          Merge();
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case ONE:
            One();
            break;
          default:
            jj_la1[51] = jj_gen;
            ;
          }
          break;
        default:
          jj_la1[52] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
      default:
        jj_la1[53] = jj_gen;
        ;
      }
      break;
    default:
      jj_la1[60] = jj_gen;
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LIST:
      case MERGE:
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case LIST:
          List();
          break;
        case MERGE:
          Merge();
          break;
        default:
          jj_la1[54] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case ONE:
        case S_MORE:
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case ONE:
            One();
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case S_MORE:
              More();
              break;
            default:
              jj_la1[55] = jj_gen;
              ;
            }
            break;
          case S_MORE:
            More();
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case ONE:
              One();
              break;
            default:
              jj_la1[56] = jj_gen;
              ;
            }
            break;
          default:
            jj_la1[57] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
          break;
        default:
          jj_la1[58] = jj_gen;
          ;
        }
        break;
      default:
        jj_la1[59] = jj_gen;
        ;
      }
    }
  }

  final public void One() throws ParseException {
    jj_consume_token(ONE);
    astq.setOne(true);
  }

  final public void More() throws ParseException {
    jj_consume_token(S_MORE);
    astq.setMore(true);
  }

  final public void List() throws ParseException {
    jj_consume_token(LIST);
    astq.setList(true);
  }

  final public void Merge() throws ParseException {
    jj_consume_token(MERGE);
    astq.setMerge(true);
  }

  final public void GroupCountSortDisplayVar() throws ParseException {
    GroupCountSortDisplay();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case DISTINCT:
    case REDUCED:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case DISTINCT:
        jj_consume_token(DISTINCT);
                      astq.setDistinct(true);
        break;
      case REDUCED:
        jj_consume_token(REDUCED);
                                                               astq.setReduced(true);
        break;
      default:
        jj_la1[61] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case SORTED:
        jj_consume_token(SORTED);
                     astq.setStrictDistinct(false);
        break;
      default:
        jj_la1[62] = jj_gen;
        ;
      }
      break;
    default:
      jj_la1[63] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case VAR1:
    case VAR2:
    case LPAREN:
    case STAR:
      SelectVar();
      GroupCountSortDisplay();
      break;
    default:
      jj_la1[64] = jj_gen;
      ;
    }
  }

// ***************** BEGIN SPARQL1.1
  final public void SelectVar() throws ParseException {
                    Variable e1; Expression e2; Exp stack;
          stack = BasicGraphPattern.create();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case VAR1:
    case VAR2:
    case LPAREN:
      label_10:
      while (true) {
        if (jj_2_5(2)) {
          e1 = Var();
                                     astq.defSelect(e1, null);
        } else {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case LPAREN:
            SelectExp(stack);
            break;
          default:
            jj_la1[65] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case VAR1:
        case VAR2:
        case LPAREN:
          ;
          break;
        default:
          jj_la1[66] = jj_gen;
          break label_10;
        }
      }
      break;
    case STAR:
      jj_consume_token(STAR);
                                 astq.setSelectAll(true);
      label_11:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case LPAREN:
          ;
          break;
        default:
          jj_la1[67] = jj_gen;
          break label_11;
        }
        SelectExp(stack);
      }
      break;
    default:
      jj_la1[68] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void SelectExp(Exp stack) throws ParseException {
    jj_consume_token(LPAREN);
    FunVar(stack);
    jj_consume_token(RPAREN);
  }

  final public void FunVar(Exp stack) throws ParseException {
                          Expression e2; Variable e1; Variable var;
    e2 = Expression(stack);
    jj_consume_token(AS);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case VAR1:
    case VAR2:
      var = Var();
                                               astq.defSelect(var, e2);
      break;
    case LPAREN:
                          var = astq.newBlankNode();
                                //astq.defSelect(var);

      jj_consume_token(LPAREN);
      e1 = Var();
                                        astq.addVariable(var, e1);
      label_12:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case COMMA:
          ;
          break;
        default:
          jj_la1[69] = jj_gen;
          break label_12;
        }
        jj_consume_token(COMMA);
        e1 = Var();
                                                    astq.addVariable(var, e1);
      }
      jj_consume_token(RPAREN);
                          astq.defSelect(var, e2);
      break;
    default:
      jj_la1[70] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

// ********************* END SPARQL 1.1
  final public void GroupCountSortDisplay() throws ParseException {
    label_13:
    while (true) {
      if (jj_2_6(2)) {
        ;
      } else {
        break label_13;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case GROUP:
        Group();
        break;
      case SORT:
        Sort();
        break;
      case DISPLAY:
        Display();
        break;
      default:
        jj_la1[71] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

  final public void Group() throws ParseException {
                Atom var;
    jj_consume_token(GROUP);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case BY:
      jj_consume_token(BY);
      break;
    default:
      jj_la1[72] = jj_gen;
      ;
    }
    var = Var();
    astq.setGroup(var.getName());
  }

  final public void Count() throws ParseException {
                Atom var;
    jj_consume_token(COUNT);
    var = Var();
    astq.setCount(var.getName());
  }

  final public void Sort() throws ParseException {
               boolean reverse; Token t; Variable v; String sortby; Expression a; Term tm; Exp stack;
    reverse = false; stack = new And(); deprecated("sort", "order by");
    jj_consume_token(SORT);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case REVERSE:
      jj_consume_token(REVERSE);
                     reverse = true;
      break;
    default:
      jj_la1[73] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case VAR1:
    case VAR2:
      v = Var();
                      astq.setSort(v, reverse);
      break;
    case NOT:
    case EXIST:
    case BOUND:
    case STR:
    case DTYPE:
    case LANG:
    case LANGMATCHES:
    case IS_URI:
    case IS_IRI:
    case IS_BLANK:
    case IS_LITERAL:
    case REGEX:
      a = BuiltInCall(stack);
                                     astq.setSort(a, reverse);
      break;
    case LPAREN:
      a = BrackettedExpression(stack);
                                              astq.setSort(a, reverse);
      break;
    case Q_IRIref:
    case QNAME_NS:
    case QNAME:
      tm = FunctionCall(stack);
                                       astq.setSort(tm, reverse);
      break;
    default:
      jj_la1[74] = jj_gen;
      if (jj_2_7(2)) {
        tm = FunctionCorese(stack);
                                                      astq.setSort(tm, reverse);
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case COUNT:
          t = jj_consume_token(COUNT);
                          sortby = t.image.toLowerCase(); astq.setSort(sortby, reverse);
          break;
        case DISTANCE:
          t = jj_consume_token(DISTANCE);
                             sortby = t.image.toLowerCase(); astq.setSort(sortby, reverse);
          break;
        default:
          jj_la1[75] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    }
  }

  final public void Display() throws ParseException {
                  Token t;
    jj_consume_token(DISPLAY);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case D_RDF:
      jj_consume_token(D_RDF);
                                     astq.setRDF(true);
      break;
    case D_JSON:
      jj_consume_token(D_JSON);
                                     astq.setJSON(true);
      break;
    case D_FLAT:
      jj_consume_token(D_FLAT);
                                     astq.setFlat(true);
      break;
    case D_ASQUERY:
      jj_consume_token(D_ASQUERY);
                                        astq.setPQuery(true);
      break;
    case INTEGER:
      t = jj_consume_token(INTEGER);
                                            astq.setMaxDisplay(Integer.parseInt(t.image));
      break;
    case D_XML:
      jj_consume_token(D_XML);
                                    astq.setXMLBind(true);
      break;
    case D_BLANK:
      jj_consume_token(D_BLANK);
                                      astq.setDisplayBNID(true);
      break;
    default:
      jj_la1[76] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void Max() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case PROJECTION:
      Projection();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case THRESHOLD:
      case RESULT:
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case RESULT:
          Result();
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case THRESHOLD:
            Threshold();
            break;
          default:
            jj_la1[77] = jj_gen;
            ;
          }
          break;
        case THRESHOLD:
          Threshold();
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case RESULT:
            Result();
            break;
          default:
            jj_la1[78] = jj_gen;
            ;
          }
          break;
        default:
          jj_la1[79] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
      default:
        jj_la1[80] = jj_gen;
        ;
      }
      break;
    case RESULT:
      Result();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case THRESHOLD:
      case PROJECTION:
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case PROJECTION:
          Projection();
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case THRESHOLD:
            Threshold();
            break;
          default:
            jj_la1[81] = jj_gen;
            ;
          }
          break;
        case THRESHOLD:
          Threshold();
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case PROJECTION:
            Projection();
            break;
          default:
            jj_la1[82] = jj_gen;
            ;
          }
          break;
        default:
          jj_la1[83] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
      default:
        jj_la1[84] = jj_gen;
        ;
      }
      break;
    default:
      jj_la1[90] = jj_gen;
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case THRESHOLD:
        Threshold();
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case RESULT:
        case PROJECTION:
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case PROJECTION:
            Projection();
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case RESULT:
              Result();
              break;
            default:
              jj_la1[85] = jj_gen;
              ;
            }
            break;
          case RESULT:
            Result();
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case PROJECTION:
              Projection();
              break;
            default:
              jj_la1[86] = jj_gen;
              ;
            }
            break;
          default:
            jj_la1[87] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
          break;
        default:
          jj_la1[88] = jj_gen;
          ;
        }
        break;
      default:
        jj_la1[89] = jj_gen;
        ;
      }
    }
  }

  final public void Projection() throws ParseException {
                     Token t;
    jj_consume_token(PROJECTION);
    t = jj_consume_token(INTEGER);
    astq.setMaxProjection(Integer.parseInt(t.image));
  }

  final public void Result() throws ParseException {
                 Token t;
    jj_consume_token(RESULT);
    t = jj_consume_token(INTEGER);
    astq.setMaxResult(Integer.parseInt(t.image));
  }

  final public void Threshold() throws ParseException {
                    Token t;
    jj_consume_token(THRESHOLD);
    t = jj_consume_token(INTEGER);
    astq.setThreshold(Float.parseFloat(t.image));
  }

// ----
  final public void DatasetClause() throws ParseException {
                         String s;
    jj_consume_token(FROM);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case Q_IRIref:
    case QNAME_NS:
    case QNAME:
    case VAR1:
      s = DefaultGraphClause();
                               astq.setFrom(s);
      break;
    case NAMED:
      s = NamedGraphClause();
                             astq.setNamed(s);
      break;
    default:
      jj_la1[91] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public String DefaultGraphClause() throws ParseException {
                                String s;
    s = SourceSelector();
    {if (true) return s;}
    throw new Error("Missing return statement in function");
  }

  final public String NamedGraphClause() throws ParseException {
                              String s;
    jj_consume_token(NAMED);
    s = SourceSelector();
    {if (true) return s;}
    throw new Error("Missing return statement in function");
  }

  final public String SourceSelector() throws ParseException {
                           Token t1; String s;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case Q_IRIref:
    case QNAME_NS:
    case QNAME:
      s = IRIref();
      break;
    case VAR1:
      t1 = jj_consume_token(VAR1);
                                      s = t1.image;
      break;
    default:
      jj_la1[92] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    {if (true) return s;}
    throw new Error("Missing return statement in function");
  }

  final public Exp WhereClause() throws ParseException {
                      Exp stack;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case WHERE:
      jj_consume_token(WHERE);
              astq.setWhere(true);
      break;
    default:
      jj_la1[93] = jj_gen;
      ;
    }
    //{ stack = BasicGraphPattern.create(); }
       stack = GroupGraphPattern();
     {if (true) return stack;}
    throw new Error("Missing return statement in function");
  }

  final public void SolutionModifier() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case RELAX:
      Relax();
      break;
    default:
      jj_la1[94] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ORDER:
    case GROUP:
    case HAVING:
      OrderGroup();
      break;
    default:
      jj_la1[95] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LIMIT:
    case OFFSET:
    case PROJECTION:
      LimitOffset();
      break;
    default:
      jj_la1[96] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case BINDINGS:
      Bindings();
      break;
    default:
      jj_la1[97] = jj_gen;
      ;
    }
    label_14:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case DISPLAY:
        ;
        break;
      default:
        jj_la1[98] = jj_gen;
        break label_14;
      }
      Display();
    }
    label_15:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PRAGMA:
        ;
        break;
      default:
        jj_la1[99] = jj_gen;
        break label_15;
      }
      Pragma();
    }
  }

  final public void Bindings() throws ParseException {
                   Variable var; Constant val; ArrayList<Variable> list; ArrayList<Constant>  value;
         list = new ArrayList<Variable>();
    jj_consume_token(BINDINGS);
    label_16:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case VAR1:
      case VAR2:
        ;
        break;
      default:
        jj_la1[100] = jj_gen;
        break label_16;
      }
      var = Var();
                                 list.add(var);
    }
                                  astq.setVariableBindings(list);
    jj_consume_token(LBRACE);
    label_17:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LPAREN:
        ;
        break;
      default:
        jj_la1[101] = jj_gen;
        break label_17;
      }
      jj_consume_token(LPAREN);
                          value = new ArrayList<Constant>();
      label_18:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case Q_IRIref:
        case QNAME_NS:
        case QNAME:
        case TRUE:
        case FALSE:
        case UNDEF:
        case INTEGER:
        case DECIMAL:
        case DOUBLE:
        case STRING_LITERAL1:
        case STRING_LITERAL2:
        case STRING_LITERAL_LONG1:
        case STRING_LITERAL_LONG2:
          ;
          break;
        default:
          jj_la1[102] = jj_gen;
          break label_18;
        }
        val = Value();
                                          value.add(val);
      }
                          astq.setValueBindings(value);
      jj_consume_token(RPAREN);
    }
    jj_consume_token(RBRACE);
  }

  final public Constant Value() throws ParseException {
                     Constant cst; String s; Token t1;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case Q_IRIref:
      s = Q_IRI_ref();
                            cst = astq.createConstant(s);
      break;
    case QNAME:
      t1 = jj_consume_token(QNAME);
                            cst = astq.createConstant(t1.image); cst.setQName(true);
      break;
    case QNAME_NS:
      t1 = jj_consume_token(QNAME_NS);
                            cst = astq.createConstant(t1.image); cst.setQName(true);
      break;
    case UNDEF:
      t1 = jj_consume_token(UNDEF);
                            cst = null;
      break;
    case STRING_LITERAL1:
    case STRING_LITERAL2:
    case STRING_LITERAL_LONG1:
    case STRING_LITERAL_LONG2:
      cst = RDFLiteral();
      break;
    case INTEGER:
    case DECIMAL:
    case DOUBLE:
      cst = NumericLiteral();
      break;
    case TRUE:
    case FALSE:
      cst = BooleanLiteral();
      break;
    default:
      jj_la1[103] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    {if (true) return cst;}
    throw new Error("Missing return statement in function");
  }

  final public void Pragma() throws ParseException {
                 Exp exp; String uri;
         uri = null;
    jj_consume_token(PRAGMA);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case Q_IRIref:
    case QNAME_NS:
    case QNAME:
      uri = IRIref();
      break;
    default:
      jj_la1[104] = jj_gen;
      ;
    }
    exp = GroupGraphPattern();
        astq.setPragma(uri, exp);
  }

  final public void Relax() throws ParseException {
                Token t1;
    jj_consume_token(RELAX);
    jj_consume_token(BY);
    t1 = jj_consume_token(QNAME);
         astq.setDistance(t1.image);
  }

  final public void LimitOffset() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LIMIT:
    case PROJECTION:
      ProjLimitClause();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case OFFSET:
        OffsetClause();
        break;
      default:
        jj_la1[105] = jj_gen;
        ;
      }
      break;
    case OFFSET:
      OffsetClause();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LIMIT:
      case PROJECTION:
        ProjLimitClause();
        break;
      default:
        jj_la1[106] = jj_gen;
        ;
      }
      break;
    default:
      jj_la1[107] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void OrderGroup() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case GROUP:
      GroupClause();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ORDER:
        OrderClause();
        break;
      default:
        jj_la1[108] = jj_gen;
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case HAVING:
        Having();
        break;
      default:
        jj_la1[109] = jj_gen;
        ;
      }
      break;
    case ORDER:
      OrderClause();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case GROUP:
        GroupClause();
        break;
      default:
        jj_la1[110] = jj_gen;
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case HAVING:
        Having();
        break;
      default:
        jj_la1[111] = jj_gen;
        ;
      }
      break;
    case HAVING:
      Having();
      break;
    default:
      jj_la1[112] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void GroupClause() throws ParseException {
                      Variable var; Expression exp; Exp stack;
                stack = new And();
                var = null;
    jj_consume_token(GROUP);
    jj_consume_token(BY);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case Q_IRIref:
    case QNAME_NS:
    case QNAME:
    case VAR1:
    case VAR2:
    case NOT:
    case EXIST:
    case BOUND:
    case STR:
    case DTYPE:
    case LANG:
    case LANGMATCHES:
    case IS_URI:
    case IS_IRI:
    case IS_BLANK:
    case IS_LITERAL:
    case REGEX:
    case COUNT:
    case SCORE:
    case DISTANCE:
    case XPATH:
    case SIMPLE_STRING:
    case LPAREN:
      label_19:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case LPAREN:
          jj_consume_token(LPAREN);
          exp = Expression(stack);
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case AS:
            jj_consume_token(AS);
            var = Var();
            break;
          default:
            jj_la1[113] = jj_gen;
            ;
          }
          jj_consume_token(RPAREN);
          break;
        case VAR1:
        case VAR2:
          exp = Var();
          break;
        case NOT:
        case EXIST:
        case BOUND:
        case STR:
        case DTYPE:
        case LANG:
        case LANGMATCHES:
        case IS_URI:
        case IS_IRI:
        case IS_BLANK:
        case IS_LITERAL:
        case REGEX:
          exp = BuiltInCall(stack);
          break;
        case Q_IRIref:
        case QNAME_NS:
        case QNAME:
          exp = FunctionCall(stack);
          break;
        case COUNT:
        case SCORE:
        case DISTANCE:
        case XPATH:
        case SIMPLE_STRING:
          exp = FunctionCorese(stack);
          break;
        default:
          jj_la1[114] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
          astq.setGroup(exp, var);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case Q_IRIref:
        case QNAME_NS:
        case QNAME:
        case VAR1:
        case VAR2:
        case NOT:
        case EXIST:
        case BOUND:
        case STR:
        case DTYPE:
        case LANG:
        case LANGMATCHES:
        case IS_URI:
        case IS_IRI:
        case IS_BLANK:
        case IS_LITERAL:
        case REGEX:
        case COUNT:
        case SCORE:
        case DISTANCE:
        case XPATH:
        case SIMPLE_STRING:
        case LPAREN:
          ;
          break;
        default:
          jj_la1[115] = jj_gen;
          break label_19;
        }
      }
      break;
    case ANY:
      jj_consume_token(ANY);
          astq.setConnex(true);
      break;
    default:
      jj_la1[116] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void Having() throws ParseException {
                 Exp stack;
         stack = new And();
    jj_consume_token(HAVING);
    Filter(stack);
         astq.setHaving(stack);
  }

  final public void OrderClause() throws ParseException {
    jj_consume_token(ORDER);
    jj_consume_token(BY);
    label_20:
    while (true) {
      OrderCondition();
      if (jj_2_8(2)) {
        ;
      } else {
        break label_20;
      }
    }
  }

  final public void OrderCondition() throws ParseException {
                          boolean reverse; Token t; String sortby; Variable v; Expression a; Term tm; Exp stack;
                reverse = false;
                stack = new And();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case VAR1:
    case VAR2:
      v = Var();
                            astq.setSort(v, reverse);
      break;
    case NOT:
    case EXIST:
    case BOUND:
    case STR:
    case DTYPE:
    case LANG:
    case LANGMATCHES:
    case IS_URI:
    case IS_IRI:
    case IS_BLANK:
    case IS_LITERAL:
    case REGEX:
      a = BuiltInCall(stack);
                                       astq.setSort(a, reverse);
      break;
    case Q_IRIref:
    case QNAME_NS:
    case QNAME:
      tm = FunctionCall(stack);
                                         astq.setSort(tm, reverse);
      break;
    default:
      jj_la1[120] = jj_gen;
      if (jj_2_9(2)) {
        tm = FunctionCorese(stack);
                                                        astq.setSort(tm, reverse);
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case ASC:
        case DESC:
        case COUNT:
        case DISTANCE:
        case LPAREN:
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case ASC:
          case DESC:
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case ASC:
              jj_consume_token(ASC);
              break;
            case DESC:
              jj_consume_token(DESC);
                                   reverse = true;
              break;
            default:
              jj_la1[117] = jj_gen;
              jj_consume_token(-1);
              throw new ParseException();
            }
            break;
          default:
            jj_la1[118] = jj_gen;
            ;
          }
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case LPAREN:
            a = BrackettedExpression(stack);
                                                          astq.setSort(a, reverse);
            break;
          case DISTANCE:
            t = jj_consume_token(DISTANCE);
                                           sortby = t.image; astq.setSort(sortby, reverse);
            break;
          case COUNT:
            t = jj_consume_token(COUNT);
                                        sortby = t.image; astq.setSort(sortby, reverse);
            break;
          default:
            jj_la1[119] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
          break;
        default:
          jj_la1[121] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    }
  }

  final public void ProjLimitClause() throws ParseException {
                           Token t;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case PROJECTION:
      Projection();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LIMIT:
        LimitClause();
        break;
      default:
        jj_la1[122] = jj_gen;
        ;
      }
      break;
    case LIMIT:
      LimitClause();
      break;
    default:
      jj_la1[123] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void LimitClause() throws ParseException {
                       Token t;
    jj_consume_token(LIMIT);
    t = jj_consume_token(INTEGER);
    astq.setMaxResult(Integer.parseInt(t.image));
  }

  final public void OffsetClause() throws ParseException {
                        Token t;
    jj_consume_token(OFFSET);
    t = jj_consume_token(INTEGER);
    astq.setOffset(Integer.parseInt(t.image));
  }

// **** General Graph Pattern ********************************************
  final public Exp GroupGraphPattern() throws ParseException {
                           Exp stack;
    stack = BasicGraphPattern.create();
    jj_consume_token(LBRACE);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case SELECT:
      SubQuery(stack);
      break;
    default:
      jj_la1[124] = jj_gen;
      GraphPattern(stack);
    }
    jj_consume_token(RBRACE);
    {if (true) return stack;}
    throw new Error("Missing return statement in function");
  }

  final public void GraphPattern(Exp stack) throws ParseException {
    FilteredBasicGraphPattern(stack);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case GRAPH:
    case SERVICE:
    case OPTIONAL:
    case MINUSP:
    case NOT:
    case SCOPE:
    case FORALL:
    case IF:
    case EXIST:
    case BIND:
    case SCORE:
    case OPTION:
    case LBRACE:
      GraphPatternNotTriples(stack);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case DOT:
        jj_consume_token(DOT);
        break;
      default:
        jj_la1[125] = jj_gen;
        ;
      }
      GraphPattern(stack);
      break;
    default:
      jj_la1[126] = jj_gen;
      ;
    }
  }

  final public void FilteredBasicGraphPattern(Exp stack) throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case Q_IRIref:
    case QNAME_NS:
    case QNAME:
    case BLANK_NODE_LABEL:
    case VAR1:
    case VAR2:
    case TRUE:
    case FALSE:
    case INTEGER:
    case DECIMAL:
    case DOUBLE:
    case STRING_LITERAL1:
    case STRING_LITERAL2:
    case STRING_LITERAL_LONG1:
    case STRING_LITERAL_LONG2:
    case LPAREN:
    case LBRACKET:
    case ANON:
      BlockOfTriples(stack);
      break;
    default:
      jj_la1[127] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case FILTER:
      Constraint(stack);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case DOT:
        jj_consume_token(DOT);
        break;
      default:
        jj_la1[128] = jj_gen;
        ;
      }
      FilteredBasicGraphPattern(stack);
      break;
    default:
      jj_la1[129] = jj_gen;
      ;
    }
  }

//BlockOfTriples		:= TriplesSameSubject ( <DOT> ( TriplesSameSubject )? )*
  final public void BlockOfTriples(Exp stack) throws ParseException {
    TriplesSameSubject(stack);
    label_21:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case Q_IRIref:
      case QNAME_NS:
      case QNAME:
      case BLANK_NODE_LABEL:
      case VAR1:
      case VAR2:
      case TRUE:
      case FALSE:
      case INTEGER:
      case DECIMAL:
      case DOUBLE:
      case STRING_LITERAL1:
      case STRING_LITERAL2:
      case STRING_LITERAL_LONG1:
      case STRING_LITERAL_LONG2:
      case LPAREN:
      case LBRACKET:
      case ANON:
      case DOT:
        ;
        break;
      default:
        jj_la1[130] = jj_gen;
        break label_21;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case DOT:
        jj_consume_token(DOT);
        break;
      case Q_IRIref:
      case QNAME_NS:
      case QNAME:
      case BLANK_NODE_LABEL:
      case VAR1:
      case VAR2:
      case TRUE:
      case FALSE:
      case INTEGER:
      case DECIMAL:
      case DOUBLE:
      case STRING_LITERAL1:
      case STRING_LITERAL2:
      case STRING_LITERAL_LONG1:
      case STRING_LITERAL_LONG2:
      case LPAREN:
      case LBRACKET:
      case ANON:
        TriplesSameSubject(stack);
        break;
      default:
        jj_la1[131] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

  final public void GraphPatternNotTriples(Exp stack) throws ParseException {
                                          ASTQuery ast;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case OPTIONAL:
    case OPTION:
      OptionalGraphPattern(stack);
      break;
    case MINUSP:
      MinusGraphPattern(stack);
      break;
    default:
      jj_la1[132] = jj_gen;
      if (jj_2_10(2)) {
        GroupOrUnionGraphPattern(stack);
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case GRAPH:
          GraphGraphPattern(stack);
          break;
        case SERVICE:
          ServicePattern(stack);
          break;
        case SCORE:
          ScoreGraphPattern(stack);
          break;
        case SCOPE:
          ScopeGraphPattern(stack);
          break;
        case NOT:
          NegationGraphPattern(stack);
          break;
        case FORALL:
          ForallGraphPattern(stack);
          break;
        case IF:
          IfThenElse(stack);
          break;
        case EXIST:
          ExistGraphPattern(stack);
          break;
        case LBRACE:
          jj_consume_token(LBRACE);
          SubQuery(stack);
          jj_consume_token(RBRACE);
          break;
        case BIND:
          Bind(stack);
          break;
        default:
          jj_la1[133] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    }
  }

  final public void SubQuery(Exp stack) throws ParseException {
                            ASTQuery ast; Query q; Exp exp;
                  ast = astq; astq = astq.subCreate();
    exp = SelectQuery();
                  astq.setBody(exp); q = Query.create(astq); stack.add(q); astq = ast;
  }

  final public void Bind(Exp stack) throws ParseException {
                         Expression exp; Exp q; Variable var;
    jj_consume_token(BIND);
    jj_consume_token(LPAREN);
    exp = Expression(stack);
    jj_consume_token(AS);
    var = Var();
    jj_consume_token(RPAREN);
                q = astq.createBind(exp, var); stack.add(q);
  }

// ---- Definitions of each pattern element
  final public void OptionalGraphPattern(Exp stack) throws ParseException {
                                         Exp e;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case OPTIONAL:
      jj_consume_token(OPTIONAL);
      break;
    case OPTION:
      jj_consume_token(OPTION);
                                  deprecated("option","optional");
      break;
    default:
      jj_la1[134] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    e = GroupGraphPattern();
                e= Option.create(e);
                stack.add(e);
  }

  final public void MinusGraphPattern(Exp stack) throws ParseException {
                                      Exp e;
    jj_consume_token(MINUSP);
    e = GroupGraphPattern();
                e = Minus.create(e);
                stack.add(e);
  }

  final public void NegationGraphPattern(Exp stack) throws ParseException {
                                         Exp e;
    jj_consume_token(NOT);
    e = GroupGraphPattern();
                e= Negation.create(e);
                stack.add(e);
  }

  final public void ExistGraphPattern(Exp stack) throws ParseException {
                                      Exp e;
    jj_consume_token(EXIST);
    e = GroupGraphPattern();
                e= Exist.create(e);
                stack.add(e);
  }

  final public void ScopeGraphPattern(Exp stack) throws ParseException {
                                      Exp e;
    jj_consume_token(SCOPE);
    e = GroupGraphPattern();
                e= Scope.create(e);
                stack.add(e);
  }

  final public void IfThenElse(Exp stack) throws ParseException {
                               Exp e; Exp e1; Exp e2; Exp e3;
    jj_consume_token(IF);
    e1 = GroupGraphPattern();
    jj_consume_token(THEN);
    e2 = GroupGraphPattern();
         e3 = null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ELSE:
      jj_consume_token(ELSE);
      e3 = GroupGraphPattern();
      break;
    default:
      jj_la1[135] = jj_gen;
      ;
    }
           e = IfThenElse.create(e1, e2, e3); stack.add(e);
  }

  final public void ForallGraphPattern(Exp stack) throws ParseException {
                                       Exp e; Exp e1; Exp e2;
    jj_consume_token(FORALL);
    e1 = GroupGraphPattern();
    e2 = GroupGraphPattern();
                e = Forall.create(e1, e2);
                stack.add(e);
  }

  final public void GraphGraphPattern(Exp stack) throws ParseException {
          Atom src; Exp e; Source st;
          boolean state = false, leaf = false, rec = false;
    jj_consume_token(GRAPH);
    src = VarOrIRIref(stack);
    e = GroupGraphPattern();
                st =  Source.create(src, e);
                if (state) {
                        st.setState(true);
                        if (leaf) st.setLeaf(true);
                }
                if (rec){
                        st.setRec(true);
                }
                stack.add(st);
  }

  final public void ServicePattern(Exp stack) throws ParseException {
          Atom src; Exp e; Service st;
    jj_consume_token(SERVICE);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case SILENT:
      jj_consume_token(SILENT);
      break;
    default:
      jj_la1[136] = jj_gen;
      ;
    }
    src = VarOrIRIref(stack);
    e = GroupGraphPattern();
                st =  Service.create(src, e);
                stack.add(st);
  }

  final public void ScoreGraphPattern(Exp stack) throws ParseException {
                                      Atom src; Exp e;
    jj_consume_token(SCORE);
    src = VarOrBlankNodeOrIRIref(stack);
    e = GroupGraphPattern();
        astq.setScore(true);
        e = Score.create(src, e);
        stack.add(e);
  }

// G (union G)* can be a single group pattern
// or a group pattern as part of an union.
  final public void GroupOrUnionGraphPattern(Exp stack) throws ParseException {
                                             Exp temp, res;
    res = GroupGraphPattern();
    label_22:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case UNION:
      case OR:
        ;
        break;
      default:
        jj_la1[137] = jj_gen;
        break label_22;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case UNION:
        jj_consume_token(UNION);
        break;
      case OR:
        jj_consume_token(OR);
                                   deprecated("or","union");
        break;
      default:
        jj_la1[138] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
                        temp = res;
                res =  Or.create();
                res.add(temp);
      temp = GroupGraphPattern();
          res.add(temp);
    }
          stack.add(res);
  }

  final public void Constraint(Exp stack) throws ParseException {
    jj_consume_token(FILTER);
    Filter(stack);
  }

  final public void Filter(Exp stack) throws ParseException {
                           Expression expression1; Triple triple;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LPAREN:
      expression1 = BrackettedExpression(stack);
      break;
    case NOT:
    case EXIST:
    case BOUND:
    case STR:
    case DTYPE:
    case LANG:
    case LANGMATCHES:
    case IS_URI:
    case IS_IRI:
    case IS_BLANK:
    case IS_LITERAL:
    case REGEX:
      expression1 = BuiltInCall(stack);
      break;
    case COUNT:
    case SCORE:
    case DISTANCE:
    case XPATH:
    case SIMPLE_STRING:
      expression1 = FunctionCorese(stack);
      break;
    case Q_IRIref:
    case QNAME_NS:
    case QNAME:
      expression1 = FunctionCall(stack);
      break;
    default:
      jj_la1[139] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
                if (expression1 != null ) {
                triple = astq.createTriple(expression1);
                stack.add(triple);
            }
  }

// -------- Construct patterns
  final public Exp ConstructTemplate() throws ParseException {
                            Exp stack;
    jj_consume_token(LBRACE);
          stack = BasicGraphPattern.create();
    ConstructTriples(stack);
    jj_consume_token(RBRACE);
    {if (true) return stack;}
    throw new Error("Missing return statement in function");
  }

  final public void ConstructTriples(Exp stack) throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case Q_IRIref:
    case QNAME_NS:
    case QNAME:
    case BLANK_NODE_LABEL:
    case VAR1:
    case VAR2:
    case GRAPH:
    case TRUE:
    case FALSE:
    case INTEGER:
    case DECIMAL:
    case DOUBLE:
    case STRING_LITERAL1:
    case STRING_LITERAL2:
    case STRING_LITERAL_LONG1:
    case STRING_LITERAL_LONG2:
    case LPAREN:
    case LBRACKET:
    case ANON:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case Q_IRIref:
      case QNAME_NS:
      case QNAME:
      case BLANK_NODE_LABEL:
      case VAR1:
      case VAR2:
      case TRUE:
      case FALSE:
      case INTEGER:
      case DECIMAL:
      case DOUBLE:
      case STRING_LITERAL1:
      case STRING_LITERAL2:
      case STRING_LITERAL_LONG1:
      case STRING_LITERAL_LONG2:
      case LPAREN:
      case LBRACKET:
      case ANON:
        TriplesSameSubject(stack);
        break;
      case GRAPH:
        GraphGraphPattern(stack);
        break;
      default:
        jj_la1[140] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case DOT:
        jj_consume_token(DOT);
        break;
      default:
        jj_la1[141] = jj_gen;
        ;
      }
      ConstructTriples(stack);
      break;
    default:
      jj_la1[142] = jj_gen;
      ;
    }
  }

  final public Exp ConstructTemplate2() throws ParseException {
                             Exp stack;
    jj_consume_token(LBRACE);
          stack = BasicGraphPattern.create();
    ConstructTriples2(stack);
    jj_consume_token(RBRACE);
    {if (true) return stack;}
    throw new Error("Missing return statement in function");
  }

  final public void ConstructTriples2(Exp stack) throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case Q_IRIref:
    case QNAME_NS:
    case QNAME:
    case BLANK_NODE_LABEL:
    case VAR1:
    case VAR2:
    case TRUE:
    case FALSE:
    case INTEGER:
    case DECIMAL:
    case DOUBLE:
    case STRING_LITERAL1:
    case STRING_LITERAL2:
    case STRING_LITERAL_LONG1:
    case STRING_LITERAL_LONG2:
    case LPAREN:
    case LBRACKET:
    case ANON:
      TriplesSameSubject(stack);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case DOT:
        jj_consume_token(DOT);
        break;
      default:
        jj_la1[143] = jj_gen;
        ;
      }
      ConstructTriples2(stack);
      break;
    default:
      jj_la1[144] = jj_gen;
      ;
    }
  }

// -------- Triple lists with property and object lists
  final public void TriplesSameSubject(Exp stack) throws ParseException {
                                       Expression expression1;
    if (jj_2_11(2)) {
      expression1 = VarOrTerm(stack);
      stack = PropertyListNotEmpty(expression1, stack);
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LPAREN:
      case LBRACKET:
        expression1 = TriplesNode(stack);
        stack = PropertyList(expression1, stack);
        break;
      default:
        jj_la1[145] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

  final public Exp PropertyList(Expression expression1, Exp stack) throws ParseException {
    if (jj_2_12(2)) {
      stack = PropertyListNotEmpty(expression1, stack);
    } else {
      ;
    }
    {if (true) return stack;}
    throw new Error("Missing return statement in function");
  }

  final public Exp PropertyListNotEmpty(Expression expression1, Exp stack) throws ParseException {
  ExpressionList v; Atom atom; Expression expression2; Exp e1; Triple triple; int n;
    atom = Verb2();
    n = stack.size();
    // ObjectList() may fill the stack beyond n in case of [prop ?val] 
      // hence we store the index n to add the triple at n	
      v = ObjectList(stack);
        for (int i=0;i<v.size();i++) {
        expression2 = v.get(i);
        //triple = Triple.create(expression1, atom, expression2);
        e1 = astq.createTriple(expression1, atom, expression2);
                //e1 = triple; //.parseGet(parser); //, expression1, atom, expression2);
        if (e1 != null){
                // add triple at place n (see above for definition of n)
                stack.add(n++, e1);
        }
        }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case SEMICOLON:
      jj_consume_token(SEMICOLON);
          stack = PropertyList(expression1, stack);
      break;
    default:
      jj_la1[146] = jj_gen;
      ;
    }
    {if (true) return stack;}
    throw new Error("Missing return statement in function");
  }

  final public Atom Verb2() throws ParseException {
                Atom atom; String[] s; Token t;
    s = PQualifier();
    atom = Verb();
        if (s[0]!="") { atom.setIsone(true); }
        if (s[1]!="") { atom.setIsall(true); }
        if (s[2]!="") { atom.setIsdirect(true); }
    {if (true) return atom;}
    throw new Error("Missing return statement in function");
  }

  final public String[] PQualifier() throws ParseException {
                         String[] s; String s1, s2, s3;
          s1=""; s2=""; s3="";
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case CURRENT:
    case ONE2:
      s1 = One2();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ALL2:
      case DIRECT2:
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case ALL2:
          s2 = All2();
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case DIRECT2:
            s3 = Direct2();
            break;
          default:
            jj_la1[147] = jj_gen;
            ;
          }
          break;
        case DIRECT2:
          s3 = Direct2();
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case ALL2:
            s2 = All2();
            break;
          default:
            jj_la1[148] = jj_gen;
            ;
          }
          break;
        default:
          jj_la1[149] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
      default:
        jj_la1[150] = jj_gen;
        ;
      }
      break;
    case ALL2:
      s2 = All2();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case CURRENT:
      case ONE2:
      case DIRECT2:
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case CURRENT:
        case ONE2:
          s1 = One2();
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case DIRECT2:
            s3 = Direct2();
            break;
          default:
            jj_la1[151] = jj_gen;
            ;
          }
          break;
        case DIRECT2:
          s3 = Direct2();
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case CURRENT:
          case ONE2:
            s1 = One2();
            break;
          default:
            jj_la1[152] = jj_gen;
            ;
          }
          break;
        default:
          jj_la1[153] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
      default:
        jj_la1[154] = jj_gen;
        ;
      }
      break;
    default:
      jj_la1[160] = jj_gen;
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case DIRECT2:
        s3 = Direct2();
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case ALL2:
        case CURRENT:
        case ONE2:
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case CURRENT:
          case ONE2:
            s1 = One2();
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case ALL2:
              s2 = All2();
              break;
            default:
              jj_la1[155] = jj_gen;
              ;
            }
            break;
          case ALL2:
            s2 = All2();
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case CURRENT:
            case ONE2:
              s1 = One2();
              break;
            default:
              jj_la1[156] = jj_gen;
              ;
            }
            break;
          default:
            jj_la1[157] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
          break;
        default:
          jj_la1[158] = jj_gen;
          ;
        }
        break;
      default:
        jj_la1[159] = jj_gen;
        ;
      }
    }
                s = new String[3];
                s[0] = s1; // one
                s[1] = s2; // all
                s[2] = s3; // direct

          {if (true) return s;}
    throw new Error("Missing return statement in function");
  }

  final public String One2() throws ParseException {
                 Token t;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ONE2:
      t = jj_consume_token(ONE2);
      break;
    case CURRENT:
      t = jj_consume_token(CURRENT);
      break;
    default:
      jj_la1[161] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
          {if (true) return t.image;}
    throw new Error("Missing return statement in function");
  }

  final public String All2() throws ParseException {
                 Token t;
    t = jj_consume_token(ALL2);
          {if (true) return t.image;}
    throw new Error("Missing return statement in function");
  }

  final public String Direct2() throws ParseException {
                    Token t;
    t = jj_consume_token(DIRECT2);
          {if (true) return t.image;}
    throw new Error("Missing return statement in function");
  }

  final public ExpressionList ObjectList(Exp stack) throws ParseException {
                                        Expression expression1; ExpressionList v;
    v = new ExpressionList();
    expression1 = GraphNode(stack);
    v.add(expression1);
    label_23:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[162] = jj_gen;
        break label_23;
      }
      jj_consume_token(COMMA);
      expression1 = GraphNode(stack);
       v.add(expression1);
    }
    {if (true) return v;}
    throw new Error("Missing return statement in function");
  }

  final public Atom Verb() throws ParseException {
                Atom atom;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case Q_IRIref:
    case QNAME_NS:
    case QNAME:
    case VAR1:
    case VAR2:
    case INV:
    case SHORT:
    case SHORTALL:
    case DEPTH:
    case BREADTH:
    case XPATH:
    case BEGIN_WITH:
    case LPAREN:
    case BANG:
      atom = PropertyVarOrIRIref();
      break;
    case KW_A:
      jj_consume_token(KW_A);
               atom = astq.createConstant(RDFS.rdftype);
      break;
    default:
      jj_la1[163] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    {if (true) return atom;}
    throw new Error("Missing return statement in function");
  }

  final public Atom PropertyVarOrIRIref() throws ParseException {
                              Atom atom; Token t1; Variable var; Constant cst; String temp;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case Q_IRIref:
    case QNAME_NS:
    case QNAME:
    case INV:
    case SHORT:
    case SHORTALL:
    case DEPTH:
    case BREADTH:
    case XPATH:
    case BEGIN_WITH:
    case LPAREN:
    case BANG:
      atom = StdProperty();
      break;
    case VAR1:
    case VAR2:
      atom = Var();
      break;
    default:
      jj_la1[164] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    {if (true) return atom;}
    throw new Error("Missing return statement in function");
  }

  final public Atom StdProperty2() throws ParseException {
                       Atom atom; Token t1; Variable var; Constant cst; String temp;
    t1 = jj_consume_token(QNAME);
        cst = astq.createConstant(t1.image); cst.setQName(true);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case COLON2:
      jj_consume_token(COLON2);
      var = Var();
                cst.setVar(var);
      break;
    default:
      jj_la1[165] = jj_gen;
      ;
    }
        {if (true) return cst;}
    throw new Error("Missing return statement in function");
  }

  final public Atom StdProperty() throws ParseException {
                     Variable var; Constant cst;  Expression exp;
    exp = RegExp();
        cst = astq.createProperty(exp);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case COLON2:
      jj_consume_token(COLON2);
      var = Var();
                cst.setVar(var);
      break;
    default:
      jj_la1[166] = jj_gen;
      ;
    }
        {if (true) return cst;}
    throw new Error("Missing return statement in function");
  }

  final public Expression RegExp() throws ParseException {
                     Token t; String s; Expression exp;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case XPATH:
      t = jj_consume_token(XPATH);
      jj_consume_token(LPAREN);
      s = String();
      jj_consume_token(RPAREN);
            exp = astq.createFunction(t.image, astq.createConstant(s, null, null));
      break;
    case Q_IRIref:
    case QNAME_NS:
    case QNAME:
    case BEGIN_WITH:
    case LPAREN:
    case BANG:
      exp = AddRegExp();
      break;
    case INV:
    case SHORT:
    case SHORTALL:
    case DEPTH:
    case BREADTH:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case INV:
        t = jj_consume_token(INV);
        break;
      case SHORT:
        t = jj_consume_token(SHORT);
        break;
      case SHORTALL:
        t = jj_consume_token(SHORTALL);
        break;
      case DEPTH:
        t = jj_consume_token(DEPTH);
        break;
      case BREADTH:
        t = jj_consume_token(BREADTH);
        break;
      default:
        jj_la1[167] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      exp = RegExp();
                                  exp = astq.createOperator(t.image, exp);
      break;
    default:
      jj_la1[168] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
         {if (true) return exp;}
    throw new Error("Missing return statement in function");
  }

  final public Expression AddRegExp() throws ParseException {
                        Token t; Expression exp1, exp2;
    exp1 = MultRegExp();
    label_24:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case BAR:
        ;
        break;
      default:
        jj_la1[169] = jj_gen;
        break label_24;
      }
      t = jj_consume_token(BAR);
      exp2 = MultRegExp();
     exp1 = astq.createConditionalOrExpression(t.image, exp1, exp2);
    }
      {if (true) return exp1;}
    throw new Error("Missing return statement in function");
  }

  final public Expression MultRegExp() throws ParseException {
                         Token t; Expression exp1, exp2;
    exp1 = UnaryRegExp();
    label_25:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case SLASH:
        ;
        break;
      default:
        jj_la1[170] = jj_gen;
        break label_25;
      }
      t = jj_consume_token(SLASH);
      exp2 = UnaryRegExp();
           exp1 = astq.createMultiplicativeExpression(t.image, exp1, exp2);
    }
          {if (true) return exp1;}
    throw new Error("Missing return statement in function");
  }

  final public Expression UnaryRegExp() throws ParseException {
                          Token t, t1, t2; Expression exp; Token ope; String s1, s2;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case BANG:
      t = jj_consume_token(BANG);
      exp = PrimaryRegExp();
                                  exp = astq.createOperator(t.image, exp);
      break;
    case BEGIN_WITH:
      t = jj_consume_token(BEGIN_WITH);
      exp = PrimaryRegExp();
                                  exp = astq.createOperator(t.image, exp);
      break;
    case Q_IRIref:
    case QNAME_NS:
    case QNAME:
    case LPAREN:
      exp = PrimaryRegExp();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LBRACE:
      case PLUS:
      case STAR:
      case QM:
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case PLUS:
        case STAR:
        case QM:
          ope = OpeRegExp();
                               exp = astq.createOperator(ope.image, exp);
          break;
        case LBRACE:
          jj_consume_token(LBRACE);
                    s1 = null; s2 = null;
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case INTEGER:
            t1 = jj_consume_token(INTEGER);
                                   s1 = t1.image; s2 = s1;
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case COMMA:
              jj_consume_token(COMMA);
                                                                        s2 = null;
              switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
              case INTEGER:
                t2 = jj_consume_token(INTEGER);
                                                                                                        s2 = t2.image;
                break;
              default:
                jj_la1[171] = jj_gen;
                ;
              }
              break;
            default:
              jj_la1[172] = jj_gen;
              ;
            }
            break;
          case COMMA:
            jj_consume_token(COMMA);
            t2 = jj_consume_token(INTEGER);
                                              s2 = t2.image;
            break;
          default:
            jj_la1[173] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
          jj_consume_token(RBRACE);
                  exp = astq.createOperator(s1, s2, exp);
          break;
        default:
          jj_la1[174] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
      default:
        jj_la1[175] = jj_gen;
        ;
      }
      break;
    default:
      jj_la1[176] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  {if (true) return exp;}
    throw new Error("Missing return statement in function");
  }

  final public Token OpeRegExp() throws ParseException {
                     Token ope;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case STAR:
      ope = jj_consume_token(STAR);
      break;
    case PLUS:
      ope = jj_consume_token(PLUS);
      break;
    case QM:
      ope = jj_consume_token(QM);
      break;
    default:
      jj_la1[177] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  {if (true) return ope;}
    throw new Error("Missing return statement in function");
  }

  final public Expression PrimaryRegExp() throws ParseException {
                            Expression exp, test; Exp stack; String t; Constant cst;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case Q_IRIref:
    case QNAME_NS:
    case QNAME:
      t = IRIref();
                  cst = astq.createConstant(t); cst.setQName(true); exp = cst;
      break;
    case LPAREN:
      jj_consume_token(LPAREN);
      exp = AddRegExp();
      jj_consume_token(RPAREN);
      break;
    default:
      jj_la1[178] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case AT:
      jj_consume_token(AT);
      jj_consume_token(LBRACKET);
                    stack = BasicGraphPattern.create();
      test = Expression(stack);
                   astq.setRegexTest(exp, test);
      jj_consume_token(RBRACKET);
      break;
    default:
      jj_la1[179] = jj_gen;
      ;
    }
          {if (true) return exp;}
    throw new Error("Missing return statement in function");
  }

  final public Token Soper() throws ParseException {
                 Token t;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case EQ:
      t = jj_consume_token(EQ);
      break;
    case NE:
      t = jj_consume_token(NE);
      break;
    case LT:
      t = jj_consume_token(LT);
      break;
    case GT:
      t = jj_consume_token(GT);
      break;
    case LE:
      t = jj_consume_token(LE);
      break;
    case GE:
      t = jj_consume_token(GE);
      break;
    case EQ2:
      t = jj_consume_token(EQ2);
      break;
    case NE2:
      t = jj_consume_token(NE2);
      break;
    case TILDE:
      t = jj_consume_token(TILDE);
      break;
    case BEGIN_WITH:
      t = jj_consume_token(BEGIN_WITH);
      break;
    default:
      jj_la1[180] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    {if (true) return t;}
    throw new Error("Missing return statement in function");
  }

  final public Token Toper() throws ParseException {
                 Token t;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case STRICT_SPEC:
      t = jj_consume_token(STRICT_SPEC);
      break;
    case SPEC:
      t = jj_consume_token(SPEC);
      break;
    case SAME:
      t = jj_consume_token(SAME);
      break;
    case GENERALISATION:
      t = jj_consume_token(GENERALISATION);
      break;
    case STRICT_GENERALISATION:
      t = jj_consume_token(STRICT_GENERALISATION);
      break;
    default:
      jj_la1[181] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    {if (true) return t;}
    throw new Error("Missing return statement in function");
  }

// -------- Triple expansions

// Anything that can stand in a node slot and which is
// a number of triples
  final public Expression TriplesNode(Exp stack) throws ParseException {
                                      Expression expression1;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LPAREN:
      expression1 = Collection(stack);
      break;
    case LBRACKET:
      expression1 = BlankNodePropertyList(stack);
      break;
    default:
      jj_la1[182] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    {if (true) return expression1;}
    throw new Error("Missing return statement in function");
  }

  final public Expression BlankNodePropertyList(Exp stack) throws ParseException {
                                                Expression expression1;
        // [ :p ?y ]
        expression1 = astq.newBlankNode();
    jj_consume_token(LBRACKET);
    stack = PropertyListNotEmpty(expression1, stack);
    jj_consume_token(RBRACKET);
    {if (true) return expression1;}
    throw new Error("Missing return statement in function");
  }

// ------- RDF collections
/**
* see: http://www.w3.org/TR/rdf-sparql-query/#collections
*
* exemple 1: The collection ( 1 ?x 2 3 ) generates 8 triples:
* _:b0 rdf:first 1		_:b0 rdf:rest _:b1
* _:b1 rdf:first ?x		_:b1 rdf:rest _:b2
* _:b2 rdf:first 2		_:b2 rdf:rest _:b3
* _:b3 rdf:first 3		_:b3 rdf:rest rdf:nil
*
* exemple 2: The collection ( ?x [ :p 'v' ] ( 3 ) ) generates 9 triples:
* _:b0 rdf:first x		_:b0 rdf:rest _:b1
* _:b1 rdf:first _:b2	_:b1 rdf:rest _:b3		_:b2 :p 'v'
* _:b3 rdf:first _:b4	_:b3 rdf:rest rdf:nil	_:b4 rdf:first 3	_:b4 rdf:rest rdf:nil
*
*/
  final public Expression Collection(Exp stack) throws ParseException {
  Expression graphNodeExpression, firstExpression, lastExpression, bnExpression;
  Exp tripleGenerated, finalCollection;
                lastExpression = null;
                firstExpression = null;
                finalCollection = new And();
    jj_consume_token(LPAREN);
    label_26:
    while (true) {
      graphNodeExpression = GraphNode(stack);
                        bnExpression = astq.newBlankNode();
                        if (firstExpression == null) {
                                firstExpression = bnExpression;
                        }
                        if (lastExpression != null) {
                                tripleGenerated = astq.generateRest(lastExpression, bnExpression);
                                finalCollection.add(tripleGenerated);
                        }
                        tripleGenerated = astq.generateFirst(bnExpression, graphNodeExpression);
                        finalCollection.add(tripleGenerated);
                        lastExpression = bnExpression;
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case Q_IRIref:
      case QNAME_NS:
      case QNAME:
      case BLANK_NODE_LABEL:
      case VAR1:
      case VAR2:
      case TRUE:
      case FALSE:
      case INTEGER:
      case DECIMAL:
      case DOUBLE:
      case STRING_LITERAL1:
      case STRING_LITERAL2:
      case STRING_LITERAL_LONG1:
      case STRING_LITERAL_LONG2:
      case LPAREN:
      case LBRACKET:
      case ANON:
        ;
        break;
      default:
        jj_la1[183] = jj_gen;
        break label_26;
      }
    }
    jj_consume_token(RPAREN);
                tripleGenerated = astq.generateRest(lastExpression, astq.createConstant(RDFS.qrdfNil));
                finalCollection.add(tripleGenerated);
                //System.out.println("sparql_corese.jj - Collection - "+finalCollection.toSparql());  
                stack.add(finalCollection);
                {if (true) return firstExpression;}
    throw new Error("Missing return statement in function");
  }

// -------- Nodes in a graph pattern or template
  final public Expression GraphNode(Exp stack) throws ParseException {
                                    Expression expression1;
    if (jj_2_13(2)) {
      expression1 = VarOrTerm(stack);
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LPAREN:
      case LBRACKET:
        expression1 = TriplesNode(stack);
        break;
      default:
        jj_la1[184] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    {if (true) return expression1;}
    throw new Error("Missing return statement in function");
  }

  final public Atom VarOrTerm(Exp stack) throws ParseException {
                              Atom expression1;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case VAR1:
    case VAR2:
      expression1 = Var();
      break;
    case Q_IRIref:
    case QNAME_NS:
    case QNAME:
    case BLANK_NODE_LABEL:
    case TRUE:
    case FALSE:
    case INTEGER:
    case DECIMAL:
    case DOUBLE:
    case STRING_LITERAL1:
    case STRING_LITERAL2:
    case STRING_LITERAL_LONG1:
    case STRING_LITERAL_LONG2:
    case LPAREN:
    case ANON:
      expression1 = GraphTerm(stack);
      break;
    default:
      jj_la1[185] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    {if (true) return expression1;}
    throw new Error("Missing return statement in function");
  }

  final public Atom VarOrBlankNodeOrIRIref(Exp stack) throws ParseException {
                                           Atom a; String s;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case VAR1:
    case VAR2:
      a = Var();
                s = a.getName();
      break;
    case BLANK_NODE_LABEL:
    case ANON:
      a = BlankNode(stack);
                             s = a.getName();
      break;
    case Q_IRIref:
    case QNAME_NS:
    case QNAME:
      s = IRIref();
                     a = astq.createConstant(s);
      break;
    default:
      jj_la1[186] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    {if (true) return a;}
    throw new Error("Missing return statement in function");
  }

  final public Atom VarOrIRIref(Exp stack) throws ParseException {
                                Atom a; String s;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case VAR1:
    case VAR2:
      a = Var();
      break;
    case Q_IRIref:
    case QNAME_NS:
    case QNAME:
      s = IRIref();
                     a = astq.createConstant(s);
      break;
    default:
      jj_la1[187] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    {if (true) return a;}
    throw new Error("Missing return statement in function");
  }

  final public Variable Var() throws ParseException {
                   Token t1; Variable res; String s; boolean isPath = false;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case VAR1:
      t1 = jj_consume_token(VAR1);
                  s = t1.image;
      break;
    case VAR2:
      t1 = jj_consume_token(VAR2);
                  s = "?"+(t1.image).substring(1,(t1.image).length()); isPath = true;
      break;
    default:
      jj_la1[188] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    res = ASTQuery.createVariable(s, astq); res.setPath(isPath);
    {if (true) return res;}
    throw new Error("Missing return statement in function");
  }

  final public Atom GraphTerm(Exp stack) throws ParseException {
                              Constant cst; String s; Token t1; Variable var; Atom a;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case Q_IRIref:
    case QNAME_NS:
    case QNAME:
    case TRUE:
    case FALSE:
    case INTEGER:
    case DECIMAL:
    case DOUBLE:
    case STRING_LITERAL1:
    case STRING_LITERAL2:
    case STRING_LITERAL_LONG1:
    case STRING_LITERAL_LONG2:
    case LPAREN:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case Q_IRIref:
        s = Q_IRI_ref();
                          cst = astq.createConstant(s);
        break;
      case QNAME:
        t1 = jj_consume_token(QNAME);
                  cst = astq.createConstant(t1.image); cst.setQName(true);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case COLON2:
          jj_consume_token(COLON2);
          var = Var();
                  cst.setVar(var);
          break;
        default:
          jj_la1[189] = jj_gen;
          ;
        }
        break;
      case QNAME_NS:
        t1 = jj_consume_token(QNAME_NS);
                            cst = astq.createConstant(t1.image); cst.setQName(true);
        break;
      case STRING_LITERAL1:
      case STRING_LITERAL2:
      case STRING_LITERAL_LONG1:
      case STRING_LITERAL_LONG2:
        cst = RDFLiteral();
        break;
      case INTEGER:
      case DECIMAL:
      case DOUBLE:
        // ( <MINUS> | <PLUS> )? 
                  cst = NumericLiteral();
        break;
      case TRUE:
      case FALSE:
        cst = BooleanLiteral();
        break;
      case LPAREN:
        // 		t1 = <NIL> 
                        t1 = jj_consume_token(LPAREN);
        jj_consume_token(RPAREN);
          cst = astq.createConstant(RDFS.qrdfNil);
        break;
      default:
        jj_la1[190] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
            a = cst;
      break;
    case BLANK_NODE_LABEL:
    case ANON:
      a = BlankNode(stack);
      break;
    default:
      jj_la1[191] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    {if (true) return a;}
    throw new Error("Missing return statement in function");
  }

// -------- Constraint syntax
  final public Expression Expression(Exp stack) throws ParseException {
                                     Expression expression1;
    expression1 = ConditionalOrExpression(stack);
    {if (true) return expression1;}
    throw new Error("Missing return statement in function");
  }

  final public Expression ConditionalOrExpression(Exp stack) throws ParseException {
                                                  Token t1; Expression expression1, expression2;
    expression1 = ConditionalAndExpression(stack);
    label_27:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case SC_OR:
        ;
        break;
      default:
        jj_la1[192] = jj_gen;
        break label_27;
      }
      t1 = jj_consume_token(SC_OR);
      expression2 = ConditionalAndExpression(stack);
      expression1 = astq.createConditionalOrExpression(t1.image, expression1, expression2);
    }
    {if (true) return expression1;}
    throw new Error("Missing return statement in function");
  }

  final public Expression ConditionalAndExpression(Exp stack) throws ParseException {
                                                   Token t1; Expression expression1, expression2;
    expression1 = ValueLogical(stack);
    label_28:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case SC_AND:
        ;
        break;
      default:
        jj_la1[193] = jj_gen;
        break label_28;
      }
      t1 = jj_consume_token(SC_AND);
      expression2 = ValueLogical(stack);
      expression1 = astq.createConditionalAndExpression(t1.image, expression1, expression2);
    }
    {if (true) return expression1;}
    throw new Error("Missing return statement in function");
  }

  final public Expression ValueLogical(Exp stack) throws ParseException {
                                       Expression expression1;
    expression1 = RelationalExpression(stack);
    {if (true) return expression1;}
    throw new Error("Missing return statement in function");
  }

  final public Expression RelationalExpression(Exp stack) throws ParseException {
                                               Token t1; Expression expression1, expression2; ExpressionList el; boolean not = false;
    expression1 = NumericExpression(stack);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case NOT:
    case IN:
    case EQ2:
    case NE2:
    case BEGIN_WITH:
    case STRICT_SPEC:
    case SPEC:
    case SAME:
    case GENERALISATION:
    case STRICT_GENERALISATION:
    case EQ:
    case NE:
    case GT:
    case LT:
    case LE:
    case GE:
    case TILDE:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case EQ2:
      case NE2:
      case BEGIN_WITH:
      case EQ:
      case NE:
      case GT:
      case LT:
      case LE:
      case GE:
      case TILDE:
        t1 = Soper();
        expression2 = NumericExpression(stack);
        break;
      case STRICT_SPEC:
      case SPEC:
      case SAME:
      case GENERALISATION:
      case STRICT_GENERALISATION:
        t1 = Toper();
        expression2 = NumericExpression(stack);
        break;
      case NOT:
      case IN:
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case NOT:
          jj_consume_token(NOT);
                 not = true;
          break;
        default:
          jj_la1[194] = jj_gen;
          ;
        }
        t1 = jj_consume_token(IN);
        el = ArgList(stack);
                                          expression2 = astq.createList(el);
        break;
      default:
        jj_la1[195] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      expression1 = astq.createRelationalExpression(t1.image, expression1, expression2);
    if (not){
        expression1 = astq.negation(expression1);
        }
      break;
    default:
      jj_la1[196] = jj_gen;
      ;
    }
    {if (true) return expression1;}
    throw new Error("Missing return statement in function");
  }

  final public Expression NumericExpression(Exp stack) throws ParseException {
                                             Expression expression1;
    expression1 = AdditiveExpression(stack);
    {if (true) return expression1;}
    throw new Error("Missing return statement in function");
  }

  final public Expression AdditiveExpression(Exp stack) throws ParseException {
                                             Token t1; Expression expression1, expression2;
    expression1 = MultiplicativeExpression(stack);
    label_29:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PLUS:
      case MINUS:
        ;
        break;
      default:
        jj_la1[197] = jj_gen;
        break label_29;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PLUS:
        t1 = jj_consume_token(PLUS);
        expression2 = MultiplicativeExpression(stack);
            expression1 = astq.createAdditiveExpression(t1.image, expression1, expression2);
        break;
      case MINUS:
        t1 = jj_consume_token(MINUS);
        expression2 = MultiplicativeExpression(stack);
        expression1 = astq.createAdditiveExpression(t1.image, expression1, expression2);
        break;
      default:
        jj_la1[198] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    {if (true) return expression1;}
    throw new Error("Missing return statement in function");
  }

  final public Expression MultiplicativeExpression(Exp stack) throws ParseException {
                                                   Token t1; Expression expression1, expression2;
    expression1 = UnaryExpression(stack);
    label_30:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case STAR:
      case SLASH:
        ;
        break;
      default:
        jj_la1[199] = jj_gen;
        break label_30;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case STAR:
        t1 = jj_consume_token(STAR);
        expression2 = UnaryExpression(stack);
        break;
      case SLASH:
        t1 = jj_consume_token(SLASH);
        expression2 = UnaryExpression(stack);
        break;
      default:
        jj_la1[200] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      expression1 = astq.createMultiplicativeExpression(t1.image, expression1, expression2);
    }
    {if (true) return expression1;}
    throw new Error("Missing return statement in function");
  }

  final public Expression UnaryExpression(Exp stack) throws ParseException {
                                          Token t1; Expression expression1;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case BANG:
      t1 = jj_consume_token(BANG);
      expression1 = PrimaryExpression(stack);
        expression1 = astq.createUnaryExpression(t1.image, expression1);
      break;
    case PLUS:
      t1 = jj_consume_token(PLUS);
      expression1 = PrimaryExpression(stack);
        expression1 = astq.createUnaryExpression(t1.image, expression1);
      break;
    case MINUS:
      t1 = jj_consume_token(MINUS);
      expression1 = PrimaryExpression(stack);
        expression1 = astq.createUnaryExpression(t1.image, expression1);
      break;
    case Q_IRIref:
    case QNAME_NS:
    case QNAME:
    case BLANK_NODE_LABEL:
    case VAR1:
    case VAR2:
    case NOT:
    case EXIST:
    case BOUND:
    case STR:
    case DTYPE:
    case LANG:
    case LANGMATCHES:
    case IS_URI:
    case IS_IRI:
    case IS_BLANK:
    case IS_LITERAL:
    case REGEX:
    case TRUE:
    case FALSE:
    case COUNT:
    case SCORE:
    case DISTANCE:
    case XPATH:
    case SIMPLE_STRING:
    case INTEGER:
    case DECIMAL:
    case DOUBLE:
    case STRING_LITERAL1:
    case STRING_LITERAL2:
    case STRING_LITERAL_LONG1:
    case STRING_LITERAL_LONG2:
    case LPAREN:
    case ANON:
      expression1 = PrimaryExpression(stack);
      break;
    default:
      jj_la1[201] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    {if (true) return expression1;}
    throw new Error("Missing return statement in function");
  }

  final public Expression BuiltInCall(Exp stack) throws ParseException {
                                      Expression expression1, expression2; Variable var1; Token t1; Term term;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case STR:
    case DTYPE:
    case LANG:
    case IS_URI:
    case IS_IRI:
    case IS_BLANK:
    case IS_LITERAL:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case STR:
        t1 = jj_consume_token(STR);
        break;
      case DTYPE:
        t1 = jj_consume_token(DTYPE);
        break;
      case LANG:
        t1 = jj_consume_token(LANG);
        break;
      case IS_IRI:
        t1 = jj_consume_token(IS_IRI);
        break;
      case IS_URI:
        t1 = jj_consume_token(IS_URI);
        break;
      case IS_BLANK:
        t1 = jj_consume_token(IS_BLANK);
        break;
      case IS_LITERAL:
        t1 = jj_consume_token(IS_LITERAL);
        break;
      default:
        jj_la1[202] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      jj_consume_token(LPAREN);
      expression1 = Expression(stack);
      jj_consume_token(RPAREN);
        term = astq.createFunction(t1.image, expression1);
      break;
    case BOUND:
      t1 = jj_consume_token(BOUND);
      jj_consume_token(LPAREN);
      var1 = Var();
      jj_consume_token(RPAREN);
        term = astq.createFunction(t1.image, var1);
      break;
    case LANGMATCHES:
      t1 = jj_consume_token(LANGMATCHES);
      jj_consume_token(LPAREN);
      expression1 = Expression(stack);
      jj_consume_token(COMMA);
      expression2 = Expression(stack);
      jj_consume_token(RPAREN);
        term =  astq.createFunction(t1.image, expression1);
        term.add(expression2);
      break;
    case REGEX:
      term = RegexExpression(stack);
      break;
    case NOT:
    case EXIST:
      term = exists();
      break;
    default:
      jj_la1[203] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    {if (true) return term;}
    throw new Error("Missing return statement in function");
  }

  final public Term exists() throws ParseException {
                 Exp exp; Term term; boolean neg;
         neg = false;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case NOT:
      jj_consume_token(NOT);
                neg = true;
      break;
    default:
      jj_la1[204] = jj_gen;
      ;
    }
    jj_consume_token(EXIST);
    exp = GroupGraphPattern();
                term = astq.createExist(exp, neg);
                {if (true) return term;}
    throw new Error("Missing return statement in function");
  }

  final public Term RegexExpression(Exp stack) throws ParseException {
                                   Term term; Token t; Expression expression1, expression2;
    t = jj_consume_token(REGEX);
    jj_consume_token(LPAREN);
    expression1 = Expression(stack);
    jj_consume_token(COMMA);
    expression2 = Expression(stack);
        term = astq.createFunction(t.image, expression1);
      term.add(expression2);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case COMMA:
      jj_consume_token(COMMA);
      expression2 = Expression(stack);
                                                  term.add(expression2);
      break;
    default:
      jj_la1[205] = jj_gen;
      ;
    }
    jj_consume_token(RPAREN);
    {if (true) return term;}
    throw new Error("Missing return statement in function");
  }

  final public Term FunctionCorese(Exp stack) throws ParseException {
                                  Token t; Term term; ExpressionList v; Constant cst;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case SIMPLE_STRING:
      t = jj_consume_token(SIMPLE_STRING);
      break;
    case DISTANCE:
      t = jj_consume_token(DISTANCE);
      break;
    case SCORE:
      t = jj_consume_token(SCORE);
      break;
    case COUNT:
      t = jj_consume_token(COUNT);
      break;
    case XPATH:
      t = jj_consume_token(XPATH);
      break;
    default:
      jj_la1[206] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    v = ArgList(stack);
                term = astq.createFunction(t.image, v);
    {if (true) return term;}
    throw new Error("Missing return statement in function");
  }

  final public Term FunctionCall(Exp stack) throws ParseException {
                                 Term term1;  String s; ExpressionList v;
    s = IRIref();
    v = ArgList(stack);
        term1 = astq.createFunction(s, v);
    {if (true) return term1;}
    throw new Error("Missing return statement in function");
  }

// The case of "q:name()" or just "q:name"
// by expanding out FunctionCall()
  final public Expression IRIrefOrFunction(Exp stack) throws ParseException {
                                           String s1; ExpressionList v; Term term; Expression expression;
    s1 = IRIref();
    expression = astq.createConstant(s1);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LPAREN:
      v = ArgList(stack);
        term = astq.createFunction(s1, v);
                expression = term;
      break;
    default:
      jj_la1[207] = jj_gen;
      ;
    }
    {if (true) return expression;}
    throw new Error("Missing return statement in function");
  }

  final public ExpressionList ArgList(Exp stack) throws ParseException {
                                      ExpressionList v; Token t; Expression expression1; String str;
        // Vector containing either Expression or Variable
        v = new ExpressionList();
    jj_consume_token(LPAREN);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case DISTINCT:
      jj_consume_token(DISTINCT);
                             v.setDistinct(true);
      break;
    default:
      jj_la1[208] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case Q_IRIref:
    case QNAME_NS:
    case QNAME:
    case BLANK_NODE_LABEL:
    case VAR1:
    case VAR2:
    case NOT:
    case EXIST:
    case BOUND:
    case STR:
    case DTYPE:
    case LANG:
    case LANGMATCHES:
    case IS_URI:
    case IS_IRI:
    case IS_BLANK:
    case IS_LITERAL:
    case REGEX:
    case TRUE:
    case FALSE:
    case COUNT:
    case SCORE:
    case DISTANCE:
    case XPATH:
    case SIMPLE_STRING:
    case INTEGER:
    case DECIMAL:
    case DOUBLE:
    case STRING_LITERAL1:
    case STRING_LITERAL2:
    case STRING_LITERAL_LONG1:
    case STRING_LITERAL_LONG2:
    case LPAREN:
    case LBRACKET:
    case ANON:
    case BANG:
    case PLUS:
    case MINUS:
    case STAR:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case STAR:
        jj_consume_token(STAR);
        break;
      case Q_IRIref:
      case QNAME_NS:
      case QNAME:
      case BLANK_NODE_LABEL:
      case VAR1:
      case VAR2:
      case NOT:
      case EXIST:
      case BOUND:
      case STR:
      case DTYPE:
      case LANG:
      case LANGMATCHES:
      case IS_URI:
      case IS_IRI:
      case IS_BLANK:
      case IS_LITERAL:
      case REGEX:
      case TRUE:
      case FALSE:
      case COUNT:
      case SCORE:
      case DISTANCE:
      case XPATH:
      case SIMPLE_STRING:
      case INTEGER:
      case DECIMAL:
      case DOUBLE:
      case STRING_LITERAL1:
      case STRING_LITERAL2:
      case STRING_LITERAL_LONG1:
      case STRING_LITERAL_LONG2:
      case LPAREN:
      case LBRACKET:
      case ANON:
      case BANG:
      case PLUS:
      case MINUS:
        expression1 = Arg(stack);
                                                         v.add(expression1);
        label_31:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case COMMA:
            ;
            break;
          default:
            jj_la1[209] = jj_gen;
            break label_31;
          }
          jj_consume_token(COMMA);
          expression1 = Arg(stack);
                                                         v.add(expression1);
        }
        break;
      default:
        jj_la1[210] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    default:
      jj_la1[211] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case SEMICOLON:
      jj_consume_token(SEMICOLON);
      jj_consume_token(SEPARATOR);
      jj_consume_token(EQ);
      str = String();
                                                       v.setSeparator(str);
      break;
    default:
      jj_la1[212] = jj_gen;
      ;
    }
    jj_consume_token(RPAREN);
    {if (true) return v;}
    throw new Error("Missing return statement in function");
  }

  final public Expression Arg(Exp stack) throws ParseException {
                             Expression exp;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case Q_IRIref:
    case QNAME_NS:
    case QNAME:
    case BLANK_NODE_LABEL:
    case VAR1:
    case VAR2:
    case NOT:
    case EXIST:
    case BOUND:
    case STR:
    case DTYPE:
    case LANG:
    case LANGMATCHES:
    case IS_URI:
    case IS_IRI:
    case IS_BLANK:
    case IS_LITERAL:
    case REGEX:
    case TRUE:
    case FALSE:
    case COUNT:
    case SCORE:
    case DISTANCE:
    case XPATH:
    case SIMPLE_STRING:
    case INTEGER:
    case DECIMAL:
    case DOUBLE:
    case STRING_LITERAL1:
    case STRING_LITERAL2:
    case STRING_LITERAL_LONG1:
    case STRING_LITERAL_LONG2:
    case LPAREN:
    case ANON:
    case BANG:
    case PLUS:
    case MINUS:
      exp = Expression(stack);
      break;
    case LBRACKET:
      exp = Array(stack);
      break;
    default:
      jj_la1[213] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
                {if (true) return exp;}
    throw new Error("Missing return statement in function");
  }

// fun(?x, [1 2 3])
// return a blank that contains an array (aka pointer !)
  final public Expression Array(Exp stack) throws ParseException {
                               Expression exp; ExpressionList array;
                array = new ExpressionList();
    jj_consume_token(LBRACKET);
    exp = Arg(stack);
                                             array.add(exp);
    label_32:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[214] = jj_gen;
        break label_32;
      }
      jj_consume_token(COMMA);
      exp = Arg(stack);
                                             array.add(exp);
    }
    jj_consume_token(RBRACKET);
                exp = astq.newArray(array);
                {if (true) return exp;}
    throw new Error("Missing return statement in function");
  }

  final public Expression BrackettedExpression(Exp stack) throws ParseException {
                                               Expression expression1;
    jj_consume_token(LPAREN);
    expression1 = Expression(stack);
    jj_consume_token(RPAREN);
                {if (true) return expression1;}
    throw new Error("Missing return statement in function");
  }

  final public Expression PrimaryExpression(Exp stack) throws ParseException {
                                            Expression expression1;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LPAREN:
      expression1 = BrackettedExpression(stack);
      break;
    case NOT:
    case EXIST:
    case BOUND:
    case STR:
    case DTYPE:
    case LANG:
    case LANGMATCHES:
    case IS_URI:
    case IS_IRI:
    case IS_BLANK:
    case IS_LITERAL:
    case REGEX:
      expression1 = BuiltInCall(stack);
      break;
    case COUNT:
    case SCORE:
    case DISTANCE:
    case XPATH:
    case SIMPLE_STRING:
      expression1 = FunctionCorese(stack);
      break;
    case VAR1:
    case VAR2:
      expression1 = Var();
      break;
    case STRING_LITERAL1:
    case STRING_LITERAL2:
    case STRING_LITERAL_LONG1:
    case STRING_LITERAL_LONG2:
      expression1 = RDFLiteral();
      break;
    case INTEGER:
    case DECIMAL:
    case DOUBLE:
      expression1 = NumericLiteral();
      break;
    case TRUE:
    case FALSE:
      expression1 = BooleanLiteral();
      break;
    case BLANK_NODE_LABEL:
    case ANON:
      expression1 = BlankNode(stack);
      break;
    case Q_IRIref:
    case QNAME_NS:
    case QNAME:
      expression1 = IRIrefOrFunction(stack);
      break;
    default:
      jj_la1[215] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    {if (true) return expression1;}
    throw new Error("Missing return statement in function");
  }

  final public Constant NumericLiteral() throws ParseException {
                              Token t; String datatype;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case INTEGER:
      t = jj_consume_token(INTEGER);
                     datatype = RDFS.qxsdInteger;
      break;
    case DECIMAL:
      t = jj_consume_token(DECIMAL);
                     datatype = RDFS.qxsdDecimal;
      break;
    case DOUBLE:
      t = jj_consume_token(DOUBLE);
                     datatype = RDFS.qxsdDouble;
      break;
    default:
      jj_la1[216] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
     {if (true) return astq.createConstant(t.image, datatype, null);}
    throw new Error("Missing return statement in function");
  }

  final public Constant RDFLiteral() throws ParseException {
                          Constant res; String iriref, s, lang; Token t;
    s = String();
    iriref = null; lang=null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LANGTAG:
    case DATATYPE:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LANGTAG:
        t = jj_consume_token(LANGTAG);
                    lang = t.image.substring(1,t.image.length());
        break;
      case DATATYPE:
        t = jj_consume_token(DATATYPE);
        iriref = IRIref();
        break;
      default:
        jj_la1[217] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    default:
      jj_la1[218] = jj_gen;
      ;
    }
    res = astq.createConstant(s, iriref, lang);
    {if (true) return res;}
    throw new Error("Missing return statement in function");
  }

  final public Constant BooleanLiteral() throws ParseException {
                              Token t1, t2; Constant cst; String iriref, lang;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case TRUE:
      t1 = jj_consume_token(TRUE);
      break;
    case FALSE:
      t1 = jj_consume_token(FALSE);
      break;
    default:
      jj_la1[219] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    iriref = RDFS.qxsdBoolean; lang=null;
        cst = astq.createConstant(t1.image.toLowerCase(), iriref, lang);
        {if (true) return cst;}
    throw new Error("Missing return statement in function");
  }

  final public String String() throws ParseException {
                    Token t;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case STRING_LITERAL1:
      t = jj_consume_token(STRING_LITERAL1);
      break;
    case STRING_LITERAL2:
      t = jj_consume_token(STRING_LITERAL2);
      break;
    case STRING_LITERAL_LONG1:
      t = jj_consume_token(STRING_LITERAL_LONG1);
      break;
    case STRING_LITERAL_LONG2:
      t = jj_consume_token(STRING_LITERAL_LONG2);
      break;
    default:
      jj_la1[220] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    {if (true) return t.image;}
    throw new Error("Missing return statement in function");
  }

  final public String IRIref() throws ParseException {
                    String res;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case Q_IRIref:
      res = Q_IRI_ref();
      break;
    case QNAME_NS:
    case QNAME:
      res = QName();
      break;
    default:
      jj_la1[221] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
     {if (true) return res;}
    throw new Error("Missing return statement in function");
  }

  final public String QName() throws ParseException {
                  Token t;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case QNAME:
      t = jj_consume_token(QNAME);
      break;
    case QNAME_NS:
      t = jj_consume_token(QNAME_NS);
      break;
    default:
      jj_la1[222] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    {if (true) return t.image;}
    throw new Error("Missing return statement in function");
  }

  final public Variable BlankNode(Exp stack) throws ParseException {
                                 Token t; Variable v;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case BLANK_NODE_LABEL:
      t = jj_consume_token(BLANK_NODE_LABEL);
                // check if the blank node is already in the table
                v = astq.newBlankNode(stack, t.image);
      break;
    case ANON:
      t = jj_consume_token(ANON);
                // create a new blank node
                v = astq.newBlankNode();
      break;
    default:
      jj_la1[223] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
        {if (true) return v;}
    throw new Error("Missing return statement in function");
  }

  final public String Q_IRI_ref() throws ParseException {
                       Token t; String s;
    t = jj_consume_token(Q_IRIref);
                s = t.image;
        s = s.substring(1,s.length()-1);
        //if (s.startsWith(PrettyPrintCst.CORESE_PREFIX)) {
                //s = s + ".";
        //}
        s = astq.defURI(s);
                {if (true) return s;}
    throw new Error("Missing return statement in function");
  }

  final private boolean jj_2_1(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  final private boolean jj_2_2(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_2(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  final private boolean jj_2_3(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_3(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(2, xla); }
  }

  final private boolean jj_2_4(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_4(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(3, xla); }
  }

  final private boolean jj_2_5(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_5(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(4, xla); }
  }

  final private boolean jj_2_6(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_6(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(5, xla); }
  }

  final private boolean jj_2_7(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_7(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(6, xla); }
  }

  final private boolean jj_2_8(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_8(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(7, xla); }
  }

  final private boolean jj_2_9(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_9(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(8, xla); }
  }

  final private boolean jj_2_10(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_10(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(9, xla); }
  }

  final private boolean jj_2_11(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_11(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(10, xla); }
  }

  final private boolean jj_2_12(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_12(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(11, xla); }
  }

  final private boolean jj_2_13(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_13(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(12, xla); }
  }

  final private boolean jj_3R_119() {
    if (jj_scan_token(SELECT)) return true;
    return false;
  }

  final private boolean jj_3R_225() {
    if (jj_scan_token(LPAREN)) return true;
    return false;
  }

  final private boolean jj_3R_224() {
    if (jj_3R_49()) return true;
    return false;
  }

  final private boolean jj_3R_159() {
    if (jj_scan_token(FILTER)) return true;
    return false;
  }

  final private boolean jj_3R_59() {
    if (jj_scan_token(LPAREN)) return true;
    return false;
  }

  final private boolean jj_3R_222() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_224()) {
    jj_scanpos = xsp;
    if (jj_3R_225()) return true;
    }
    return false;
  }

  final private boolean jj_3R_44() {
    if (jj_3R_53()) return true;
    return false;
  }

  final private boolean jj_3R_118() {
    if (jj_scan_token(VAR1)) return true;
    return false;
  }

  final private boolean jj_3R_235() {
    if (jj_3R_49()) return true;
    return false;
  }

  final private boolean jj_3R_52() {
    if (jj_scan_token(WHERE)) return true;
    return false;
  }

  final private boolean jj_3R_37() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_52()) jj_scanpos = xsp;
    if (jj_3R_53()) return true;
    return false;
  }

  final private boolean jj_3R_90() {
    if (jj_3R_49()) return true;
    if (jj_3R_59()) return true;
    return false;
  }

  final private boolean jj_3R_186() {
    if (jj_scan_token(SCORE)) return true;
    return false;
  }

  final private boolean jj_3R_185() {
    if (jj_scan_token(SERVICE)) return true;
    return false;
  }

  final private boolean jj_3R_117() {
    if (jj_3R_49()) return true;
    return false;
  }

  final private boolean jj_3R_100() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_117()) {
    jj_scanpos = xsp;
    if (jj_3R_118()) return true;
    }
    return false;
  }

  final private boolean jj_3R_72() {
    if (jj_scan_token(NAMED)) return true;
    return false;
  }

  final private boolean jj_3R_42() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(138)) {
    jj_scanpos = xsp;
    if (jj_scan_token(123)) {
    jj_scanpos = xsp;
    if (jj_scan_token(111)) {
    jj_scanpos = xsp;
    if (jj_scan_token(109)) {
    jj_scanpos = xsp;
    if (jj_scan_token(127)) return true;
    }
    }
    }
    }
    if (jj_3R_59()) return true;
    return false;
  }

  final private boolean jj_3R_71() {
    if (jj_3R_100()) return true;
    return false;
  }

  final private boolean jj_3R_217() {
    if (jj_3R_222()) return true;
    return false;
  }

  final private boolean jj_3R_51() {
    if (jj_3R_72()) return true;
    return false;
  }

  final private boolean jj_3R_50() {
    if (jj_3R_71()) return true;
    return false;
  }

  final private boolean jj_3R_184() {
    if (jj_scan_token(GRAPH)) return true;
    return false;
  }

  final private boolean jj_3R_36() {
    if (jj_scan_token(FROM)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_50()) {
    jj_scanpos = xsp;
    if (jj_3R_51()) return true;
    }
    return false;
  }

  final private boolean jj_3R_122() {
    if (jj_scan_token(REGEX)) return true;
    if (jj_scan_token(LPAREN)) return true;
    return false;
  }

  final private boolean jj_3R_68() {
    if (jj_scan_token(WHERE)) return true;
    return false;
  }

  final private boolean jj_3R_142() {
    if (jj_scan_token(NOT)) return true;
    return false;
  }

  final private boolean jj_3R_216() {
    if (jj_scan_token(BEGIN_WITH)) return true;
    return false;
  }

  final private boolean jj_3R_215() {
    if (jj_scan_token(BANG)) return true;
    return false;
  }

  final private boolean jj_3R_67() {
    if (jj_scan_token(DATA)) return true;
    return false;
  }

  final private boolean jj_3R_123() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_142()) jj_scanpos = xsp;
    if (jj_scan_token(EXIST)) return true;
    if (jj_3R_53()) return true;
    return false;
  }

  final private boolean jj_3R_213() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_215()) {
    jj_scanpos = xsp;
    if (jj_3R_216()) {
    jj_scanpos = xsp;
    if (jj_3R_217()) return true;
    }
    }
    return false;
  }

  final private boolean jj_3R_189() {
    if (jj_scan_token(FORALL)) return true;
    return false;
  }

  final private boolean jj_3R_48() {
    if (jj_scan_token(DELETE)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_67()) {
    jj_scanpos = xsp;
    if (jj_3R_68()) return true;
    }
    return false;
  }

  final private boolean jj_3R_88() {
    if (jj_scan_token(D_BLANK)) return true;
    return false;
  }

  final private boolean jj_3R_108() {
    if (jj_3R_123()) return true;
    return false;
  }

  final private boolean jj_3R_87() {
    if (jj_scan_token(D_XML)) return true;
    return false;
  }

  final private boolean jj_3R_107() {
    if (jj_3R_122()) return true;
    return false;
  }

  final private boolean jj_3R_86() {
    if (jj_scan_token(INTEGER)) return true;
    return false;
  }

  final private boolean jj_3R_85() {
    if (jj_scan_token(D_ASQUERY)) return true;
    return false;
  }

  final private boolean jj_3R_106() {
    if (jj_scan_token(LANGMATCHES)) return true;
    if (jj_scan_token(LPAREN)) return true;
    return false;
  }

  final private boolean jj_3R_209() {
    if (jj_3R_213()) return true;
    return false;
  }

  final private boolean jj_3R_84() {
    if (jj_scan_token(D_FLAT)) return true;
    return false;
  }

  final private boolean jj_3R_47() {
    if (jj_scan_token(INSERT)) return true;
    if (jj_scan_token(DATA)) return true;
    return false;
  }

  final private boolean jj_3R_83() {
    if (jj_scan_token(D_JSON)) return true;
    return false;
  }

  final private boolean jj_3R_105() {
    if (jj_scan_token(BOUND)) return true;
    if (jj_scan_token(LPAREN)) return true;
    return false;
  }

  final private boolean jj_3R_82() {
    if (jj_scan_token(D_RDF)) return true;
    return false;
  }

  final private boolean jj_3R_33() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_47()) {
    jj_scanpos = xsp;
    if (jj_3R_48()) return true;
    }
    return false;
  }

  final private boolean jj_3R_104() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(78)) {
    jj_scanpos = xsp;
    if (jj_scan_token(79)) {
    jj_scanpos = xsp;
    if (jj_scan_token(80)) {
    jj_scanpos = xsp;
    if (jj_scan_token(83)) {
    jj_scanpos = xsp;
    if (jj_scan_token(82)) {
    jj_scanpos = xsp;
    if (jj_scan_token(84)) {
    jj_scanpos = xsp;
    if (jj_scan_token(85)) return true;
    }
    }
    }
    }
    }
    }
    if (jj_scan_token(LPAREN)) return true;
    return false;
  }

  final private boolean jj_3R_190() {
    if (jj_scan_token(IF)) return true;
    return false;
  }

  final private boolean jj_3R_89() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_104()) {
    jj_scanpos = xsp;
    if (jj_3R_105()) {
    jj_scanpos = xsp;
    if (jj_3R_106()) {
    jj_scanpos = xsp;
    if (jj_3R_107()) {
    jj_scanpos = xsp;
    if (jj_3R_108()) return true;
    }
    }
    }
    }
    return false;
  }

  final private boolean jj_3R_221() {
    if (jj_3R_223()) return true;
    return false;
  }

  final private boolean jj_3R_220() {
    if (jj_scan_token(MINUS)) return true;
    return false;
  }

  final private boolean jj_3_1() {
    if (jj_3R_33()) return true;
    return false;
  }

  final private boolean jj_3R_219() {
    if (jj_scan_token(PLUS)) return true;
    return false;
  }

  final private boolean jj_3R_205() {
    if (jj_3R_209()) return true;
    return false;
  }

  final private boolean jj_3R_218() {
    if (jj_scan_token(BANG)) return true;
    return false;
  }

  final private boolean jj_3R_187() {
    if (jj_scan_token(SCOPE)) return true;
    return false;
  }

  final private boolean jj_3R_81() {
    if (jj_scan_token(DISTANCE)) return true;
    return false;
  }

  final private boolean jj_3R_80() {
    if (jj_scan_token(COUNT)) return true;
    return false;
  }

  final private boolean jj_3R_214() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_218()) {
    jj_scanpos = xsp;
    if (jj_3R_219()) {
    jj_scanpos = xsp;
    if (jj_3R_220()) {
    jj_scanpos = xsp;
    if (jj_3R_221()) return true;
    }
    }
    }
    return false;
  }

  final private boolean jj_3_7() {
    if (jj_3R_42()) return true;
    return false;
  }

  final private boolean jj_3R_79() {
    if (jj_3R_90()) return true;
    return false;
  }

  final private boolean jj_3R_58() {
    if (jj_scan_token(DISPLAY)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_82()) {
    jj_scanpos = xsp;
    if (jj_3R_83()) {
    jj_scanpos = xsp;
    if (jj_3R_84()) {
    jj_scanpos = xsp;
    if (jj_3R_85()) {
    jj_scanpos = xsp;
    if (jj_3R_86()) {
    jj_scanpos = xsp;
    if (jj_3R_87()) {
    jj_scanpos = xsp;
    if (jj_3R_88()) return true;
    }
    }
    }
    }
    }
    }
    return false;
  }

  final private boolean jj_3R_78() {
    if (jj_3R_103()) return true;
    return false;
  }

  final private boolean jj_3R_202() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(18)) {
    jj_scanpos = xsp;
    if (jj_scan_token(19)) {
    jj_scanpos = xsp;
    if (jj_scan_token(20)) {
    jj_scanpos = xsp;
    if (jj_scan_token(21)) {
    jj_scanpos = xsp;
    if (jj_scan_token(22)) return true;
    }
    }
    }
    }
    return false;
  }

  final private boolean jj_3R_201() {
    if (jj_3R_205()) return true;
    return false;
  }

  final private boolean jj_3R_77() {
    if (jj_3R_89()) return true;
    return false;
  }

  final private boolean jj_3R_200() {
    if (jj_scan_token(XPATH)) return true;
    return false;
  }

  final private boolean jj_3R_191() {
    if (jj_scan_token(EXIST)) return true;
    return false;
  }

  final private boolean jj_3R_76() {
    if (jj_3R_38()) return true;
    return false;
  }

  final private boolean jj_3R_75() {
    if (jj_scan_token(REVERSE)) return true;
    return false;
  }

  final private boolean jj_3R_212() {
    if (jj_3R_214()) return true;
    return false;
  }

  final private boolean jj_3R_188() {
    if (jj_scan_token(NOT)) return true;
    return false;
  }

  final private boolean jj_3R_196() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_200()) {
    jj_scanpos = xsp;
    if (jj_3R_201()) {
    jj_scanpos = xsp;
    if (jj_3R_202()) return true;
    }
    }
    return false;
  }

  final private boolean jj_3R_57() {
    if (jj_scan_token(SORT)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_75()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_76()) {
    jj_scanpos = xsp;
    if (jj_3R_77()) {
    jj_scanpos = xsp;
    if (jj_3R_78()) {
    jj_scanpos = xsp;
    if (jj_3R_79()) {
    jj_scanpos = xsp;
    if (jj_3_7()) {
    jj_scanpos = xsp;
    if (jj_3R_80()) {
    jj_scanpos = xsp;
    if (jj_3R_81()) return true;
    }
    }
    }
    }
    }
    }
    return false;
  }

  final private boolean jj_3R_198() {
    if (jj_scan_token(OPTION)) return true;
    return false;
  }

  final private boolean jj_3R_208() {
    if (jj_3R_212()) return true;
    return false;
  }

  final private boolean jj_3R_183() {
    if (jj_scan_token(MINUSP)) return true;
    return false;
  }

  final private boolean jj_3R_180() {
    if (jj_3R_196()) return true;
    return false;
  }

  final private boolean jj_3R_204() {
    if (jj_3R_208()) return true;
    return false;
  }

  final private boolean jj_3R_56() {
    if (jj_scan_token(GROUP)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(35)) jj_scanpos = xsp;
    if (jj_3R_38()) return true;
    return false;
  }

  final private boolean jj_3R_41() {
    if (jj_3R_58()) return true;
    return false;
  }

  final private boolean jj_3R_40() {
    if (jj_3R_57()) return true;
    return false;
  }

  final private boolean jj_3R_182() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(49)) {
    jj_scanpos = xsp;
    if (jj_3R_198()) return true;
    }
    return false;
  }

  final private boolean jj_3R_39() {
    if (jj_3R_56()) return true;
    return false;
  }

  final private boolean jj_3_6() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_39()) {
    jj_scanpos = xsp;
    if (jj_3R_40()) {
    jj_scanpos = xsp;
    if (jj_3R_41()) return true;
    }
    }
    return false;
  }

  final private boolean jj_3R_192() {
    if (jj_scan_token(BIND)) return true;
    return false;
  }

  final private boolean jj_3R_101() {
    if (jj_3R_119()) return true;
    return false;
  }

  final private boolean jj_3R_199() {
    if (jj_3R_204()) return true;
    return false;
  }

  final private boolean jj_3R_193() {
    if (jj_3R_199()) return true;
    return false;
  }

  final private boolean jj_3R_171() {
    if (jj_3R_192()) return true;
    return false;
  }

  final private boolean jj_3R_170() {
    if (jj_scan_token(LBRACE)) return true;
    return false;
  }

  final private boolean jj_3R_169() {
    if (jj_3R_191()) return true;
    return false;
  }

  final private boolean jj_3R_179() {
    if (jj_3R_134()) return true;
    return false;
  }

  final private boolean jj_3R_168() {
    if (jj_3R_190()) return true;
    return false;
  }

  final private boolean jj_3R_167() {
    if (jj_3R_189()) return true;
    return false;
  }

  final private boolean jj_3R_166() {
    if (jj_3R_188()) return true;
    return false;
  }

  final private boolean jj_3R_165() {
    if (jj_3R_187()) return true;
    return false;
  }

  final private boolean jj_3R_154() {
    if (jj_3R_150()) return true;
    return false;
  }

  final private boolean jj_3R_164() {
    if (jj_3R_186()) return true;
    return false;
  }

  final private boolean jj_3R_163() {
    if (jj_3R_185()) return true;
    return false;
  }

  final private boolean jj_3R_157() {
    if (jj_3R_38()) return true;
    return false;
  }

  final private boolean jj_3R_162() {
    if (jj_3R_184()) return true;
    return false;
  }

  final private boolean jj_3R_152() {
    if (jj_3R_150()) return true;
    return false;
  }

  final private boolean jj_3_10() {
    if (jj_3R_44()) return true;
    return false;
  }

  final private boolean jj_3R_156() {
    if (jj_3R_180()) return true;
    return false;
  }

  final private boolean jj_3R_172() {
    if (jj_3R_193()) return true;
    return false;
  }

  final private boolean jj_3R_161() {
    if (jj_3R_183()) return true;
    return false;
  }

  final private boolean jj_3_5() {
    if (jj_3R_38()) return true;
    return false;
  }

  final private boolean jj_3R_138() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_156()) {
    jj_scanpos = xsp;
    if (jj_3R_157()) return true;
    }
    return false;
  }

  final private boolean jj_3R_141() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_160()) {
    jj_scanpos = xsp;
    if (jj_3R_161()) {
    jj_scanpos = xsp;
    if (jj_3_10()) {
    jj_scanpos = xsp;
    if (jj_3R_162()) {
    jj_scanpos = xsp;
    if (jj_3R_163()) {
    jj_scanpos = xsp;
    if (jj_3R_164()) {
    jj_scanpos = xsp;
    if (jj_3R_165()) {
    jj_scanpos = xsp;
    if (jj_3R_166()) {
    jj_scanpos = xsp;
    if (jj_3R_167()) {
    jj_scanpos = xsp;
    if (jj_3R_168()) {
    jj_scanpos = xsp;
    if (jj_3R_169()) {
    jj_scanpos = xsp;
    if (jj_3R_170()) {
    jj_scanpos = xsp;
    if (jj_3R_171()) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  final private boolean jj_3R_160() {
    if (jj_3R_182()) return true;
    return false;
  }

  final private boolean jj_3R_116() {
    if (jj_scan_token(KW_A)) return true;
    return false;
  }

  final private boolean jj_3R_143() {
    if (jj_3R_172()) return true;
    return false;
  }

  final private boolean jj_3R_115() {
    if (jj_3R_138()) return true;
    return false;
  }

  final private boolean jj_3R_158() {
    if (jj_3R_181()) return true;
    return false;
  }

  final private boolean jj_3R_140() {
    if (jj_3R_159()) return true;
    return false;
  }

  final private boolean jj_3R_97() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_115()) {
    jj_scanpos = xsp;
    if (jj_3R_116()) return true;
    }
    return false;
  }

  final private boolean jj_3R_131() {
    if (jj_scan_token(LPAREN)) return true;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  final private boolean jj_3R_124() {
    if (jj_3R_143()) return true;
    return false;
  }

  final private boolean jj_3R_111() {
    if (jj_3R_132()) return true;
    return false;
  }

  final private boolean jj_3R_139() {
    if (jj_3R_158()) return true;
    return false;
  }

  final private boolean jj_3R_120() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_139()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_140()) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3R_130() {
    if (jj_3R_147()) return true;
    return false;
  }

  final private boolean jj_3R_129() {
    if (jj_3R_146()) return true;
    return false;
  }

  final private boolean jj_3R_144() {
    if (jj_scan_token(COLON2)) return true;
    return false;
  }

  final private boolean jj_3R_178() {
    if (jj_3R_133()) return true;
    return false;
  }

  final private boolean jj_3R_155() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_178()) {
    jj_scanpos = xsp;
    if (jj_3R_179()) return true;
    }
    return false;
  }

  final private boolean jj_3R_128() {
    if (jj_3R_145()) return true;
    return false;
  }

  final private boolean jj_3R_127() {
    if (jj_scan_token(QNAME_NS)) return true;
    return false;
  }

  final private boolean jj_3R_98() {
    if (jj_scan_token(Q_IRIref)) return true;
    return false;
  }

  final private boolean jj_3R_150() {
    if (jj_scan_token(DIRECT2)) return true;
    return false;
  }

  final private boolean jj_3R_121() {
    if (jj_3R_141()) return true;
    return false;
  }

  final private boolean jj_3R_137() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_153()) {
    jj_scanpos = xsp;
    if (jj_3R_154()) return true;
    }
    return false;
  }

  final private boolean jj_3R_153() {
    if (jj_3R_133()) return true;
    return false;
  }

  final private boolean jj_3R_102() {
    if (jj_3R_120()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_121()) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3R_126() {
    if (jj_scan_token(QNAME)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_144()) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3R_136() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_151()) {
    jj_scanpos = xsp;
    if (jj_3R_152()) return true;
    }
    return false;
  }

  final private boolean jj_3R_151() {
    if (jj_3R_134()) return true;
    return false;
  }

  final private boolean jj_3R_134() {
    if (jj_scan_token(ALL2)) return true;
    return false;
  }

  final private boolean jj_3R_125() {
    if (jj_3R_98()) return true;
    return false;
  }

  final private boolean jj_3R_110() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_125()) {
    jj_scanpos = xsp;
    if (jj_3R_126()) {
    jj_scanpos = xsp;
    if (jj_3R_127()) {
    jj_scanpos = xsp;
    if (jj_3R_128()) {
    jj_scanpos = xsp;
    if (jj_3R_129()) {
    jj_scanpos = xsp;
    if (jj_3R_130()) {
    jj_scanpos = xsp;
    if (jj_3R_131()) return true;
    }
    }
    }
    }
    }
    }
    return false;
  }

  final private boolean jj_3R_74() {
    if (jj_3R_102()) return true;
    return false;
  }

  final private boolean jj_3R_73() {
    if (jj_3R_101()) return true;
    return false;
  }

  final private boolean jj_3R_149() {
    if (jj_scan_token(ANON)) return true;
    return false;
  }

  final private boolean jj_3R_133() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(120)) {
    jj_scanpos = xsp;
    if (jj_scan_token(119)) return true;
    }
    return false;
  }

  final private boolean jj_3R_135() {
    if (jj_3R_150()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_155()) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3R_114() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_135()) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3R_95() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_110()) {
    jj_scanpos = xsp;
    if (jj_3R_111()) return true;
    }
    return false;
  }

  final private boolean jj_3R_113() {
    if (jj_3R_134()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_137()) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3R_112() {
    if (jj_3R_133()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_136()) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3R_148() {
    if (jj_scan_token(BLANK_NODE_LABEL)) return true;
    return false;
  }

  final private boolean jj_3R_55() {
    if (jj_scan_token(VAR2)) return true;
    return false;
  }

  final private boolean jj_3R_53() {
    if (jj_scan_token(LBRACE)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_73()) {
    jj_scanpos = xsp;
    if (jj_3R_74()) return true;
    }
    if (jj_scan_token(RBRACE)) return true;
    return false;
  }

  final private boolean jj_3R_54() {
    if (jj_scan_token(VAR1)) return true;
    return false;
  }

  final private boolean jj_3R_38() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_54()) {
    jj_scanpos = xsp;
    if (jj_3R_55()) return true;
    }
    return false;
  }

  final private boolean jj_3R_65() {
    if (jj_3R_95()) return true;
    return false;
  }

  final private boolean jj_3R_132() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_148()) {
    jj_scanpos = xsp;
    if (jj_3R_149()) return true;
    }
    return false;
  }

  final private boolean jj_3R_96() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_112()) {
    jj_scanpos = xsp;
    if (jj_3R_113()) {
    jj_scanpos = xsp;
    if (jj_3R_114()) return true;
    }
    }
    return false;
  }

  final private boolean jj_3R_94() {
    if (jj_scan_token(COUNT)) return true;
    return false;
  }

  final private boolean jj_3R_99() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(10)) {
    jj_scanpos = xsp;
    if (jj_scan_token(9)) return true;
    }
    return false;
  }

  final private boolean jj_3R_93() {
    if (jj_scan_token(DISTANCE)) return true;
    return false;
  }

  final private boolean jj_3R_70() {
    if (jj_3R_99()) return true;
    return false;
  }

  final private boolean jj_3R_92() {
    if (jj_3R_103()) return true;
    return false;
  }

  final private boolean jj_3R_109() {
    if (jj_scan_token(DESC)) return true;
    return false;
  }

  final private boolean jj_3R_69() {
    if (jj_3R_98()) return true;
    return false;
  }

  final private boolean jj_3R_49() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_69()) {
    jj_scanpos = xsp;
    if (jj_3R_70()) return true;
    }
    return false;
  }

  final private boolean jj_3R_91() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(38)) {
    jj_scanpos = xsp;
    if (jj_3R_109()) return true;
    }
    return false;
  }

  final private boolean jj_3R_64() {
    if (jj_3R_38()) return true;
    return false;
  }

  final private boolean jj_3R_173() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(146)) {
    jj_scanpos = xsp;
    if (jj_scan_token(147)) {
    jj_scanpos = xsp;
    if (jj_scan_token(148)) {
    jj_scanpos = xsp;
    if (jj_scan_token(149)) return true;
    }
    }
    }
    return false;
  }

  final private boolean jj_3R_45() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_64()) {
    jj_scanpos = xsp;
    if (jj_3R_65()) return true;
    }
    return false;
  }

  final private boolean jj_3_9() {
    if (jj_3R_42()) return true;
    return false;
  }

  final private boolean jj_3R_62() {
    if (jj_3R_90()) return true;
    return false;
  }

  final private boolean jj_3R_60() {
    if (jj_3R_38()) return true;
    return false;
  }

  final private boolean jj_3R_61() {
    if (jj_3R_89()) return true;
    return false;
  }

  final private boolean jj_3R_63() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_91()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_92()) {
    jj_scanpos = xsp;
    if (jj_3R_93()) {
    jj_scanpos = xsp;
    if (jj_3R_94()) return true;
    }
    }
    return false;
  }

  final private boolean jj_3_13() {
    if (jj_3R_45()) return true;
    return false;
  }

  final private boolean jj_3R_66() {
    if (jj_3R_96()) return true;
    if (jj_3R_97()) return true;
    return false;
  }

  final private boolean jj_3R_147() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(87)) {
    jj_scanpos = xsp;
    if (jj_scan_token(88)) return true;
    }
    return false;
  }

  final private boolean jj_3R_195() {
    if (jj_scan_token(DATATYPE)) return true;
    return false;
  }

  final private boolean jj_3R_43() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_60()) {
    jj_scanpos = xsp;
    if (jj_3R_61()) {
    jj_scanpos = xsp;
    if (jj_3R_62()) {
    jj_scanpos = xsp;
    if (jj_3_9()) {
    jj_scanpos = xsp;
    if (jj_3R_63()) return true;
    }
    }
    }
    }
    return false;
  }

  final private boolean jj_3R_194() {
    if (jj_scan_token(LANGTAG)) return true;
    return false;
  }

  final private boolean jj_3R_174() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_194()) {
    jj_scanpos = xsp;
    if (jj_3R_195()) return true;
    }
    return false;
  }

  final private boolean jj_3R_35() {
    if (jj_3R_49()) return true;
    return false;
  }

  final private boolean jj_3R_34() {
    if (jj_3R_38()) return true;
    return false;
  }

  final private boolean jj_3R_145() {
    if (jj_3R_173()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_174()) jj_scanpos = xsp;
    return false;
  }

  final private boolean jj_3_8() {
    if (jj_3R_43()) return true;
    return false;
  }

  final private boolean jj_3R_177() {
    if (jj_scan_token(DOUBLE)) return true;
    return false;
  }

  final private boolean jj_3R_176() {
    if (jj_scan_token(DECIMAL)) return true;
    return false;
  }

  final private boolean jj_3R_175() {
    if (jj_scan_token(INTEGER)) return true;
    return false;
  }

  final private boolean jj_3R_146() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_175()) {
    jj_scanpos = xsp;
    if (jj_3R_176()) {
    jj_scanpos = xsp;
    if (jj_3R_177()) return true;
    }
    }
    return false;
  }

  final private boolean jj_3_4() {
    if (jj_3R_37()) return true;
    return false;
  }

  final private boolean jj_3_3() {
    if (jj_3R_36()) return true;
    return false;
  }

  final private boolean jj_3R_46() {
    if (jj_3R_66()) return true;
    return false;
  }

  final private boolean jj_3_2() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_34()) {
    jj_scanpos = xsp;
    if (jj_3R_35()) return true;
    }
    return false;
  }

  final private boolean jj_3R_234() {
    if (jj_3R_235()) return true;
    return false;
  }

  final private boolean jj_3R_233() {
    if (jj_3R_132()) return true;
    return false;
  }

  final private boolean jj_3R_232() {
    if (jj_3R_147()) return true;
    return false;
  }

  final private boolean jj_3R_210() {
    if (jj_scan_token(LPAREN)) return true;
    return false;
  }

  final private boolean jj_3R_231() {
    if (jj_3R_146()) return true;
    return false;
  }

  final private boolean jj_3_12() {
    if (jj_3R_46()) return true;
    return false;
  }

  final private boolean jj_3R_230() {
    if (jj_3R_145()) return true;
    return false;
  }

  final private boolean jj_3R_229() {
    if (jj_3R_38()) return true;
    return false;
  }

  final private boolean jj_3R_228() {
    if (jj_3R_42()) return true;
    return false;
  }

  final private boolean jj_3R_227() {
    if (jj_3R_89()) return true;
    return false;
  }

  final private boolean jj_3R_197() {
    if (jj_3R_203()) return true;
    return false;
  }

  final private boolean jj_3R_226() {
    if (jj_3R_103()) return true;
    return false;
  }

  final private boolean jj_3R_223() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_226()) {
    jj_scanpos = xsp;
    if (jj_3R_227()) {
    jj_scanpos = xsp;
    if (jj_3R_228()) {
    jj_scanpos = xsp;
    if (jj_3R_229()) {
    jj_scanpos = xsp;
    if (jj_3R_230()) {
    jj_scanpos = xsp;
    if (jj_3R_231()) {
    jj_scanpos = xsp;
    if (jj_3R_232()) {
    jj_scanpos = xsp;
    if (jj_3R_233()) {
    jj_scanpos = xsp;
    if (jj_3R_234()) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  final private boolean jj_3R_103() {
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_124()) return true;
    return false;
  }

  final private boolean jj_3_11() {
    if (jj_3R_45()) return true;
    if (jj_3R_46()) return true;
    return false;
  }

  final private boolean jj_3R_181() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_11()) {
    jj_scanpos = xsp;
    if (jj_3R_197()) return true;
    }
    return false;
  }

  final private boolean jj_3R_207() {
    if (jj_3R_211()) return true;
    return false;
  }

  final private boolean jj_3R_211() {
    if (jj_scan_token(LBRACKET)) return true;
    return false;
  }

  final private boolean jj_3R_206() {
    if (jj_3R_210()) return true;
    return false;
  }

  final private boolean jj_3R_203() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_206()) {
    jj_scanpos = xsp;
    if (jj_3R_207()) return true;
    }
    return false;
  }

  public SparqlCoreseTokenManager token_source;
  JavaCharStream jj_input_stream;
  public Token token, jj_nt;
  private int jj_ntk;
  private Token jj_scanpos, jj_lastpos;
  private int jj_la;
  public boolean lookingAhead = false;
  private boolean jj_semLA;
  private int jj_gen;
  final private int[] jj_la1 = new int[224];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static private int[] jj_la1_2;
  static private int[] jj_la1_3;
  static private int[] jj_la1_4;
  static private int[] jj_la1_5;
  static {
      jj_la1_0();
      jj_la1_1();
      jj_la1_2();
      jj_la1_3();
      jj_la1_4();
      jj_la1_5();
   }
   private static void jj_la1_0() {
      jj_la1_0 = new int[] {0x1e000000,0x1e000000,0x800000,0x1000000,0x1800000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x700,0x3f00,0x0,0x3f00,0x0,0x0,0x0,0x0,0x3000,0x2000000,0x0,0x0,0x0,0x0,0x3700,0x3700,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xa0000000,0x0,0xa0000000,0x3000,0x0,0x3000,0x0,0x3000,0x0,0x3000,0x0,0x0,0x0,0x3700,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1700,0x1700,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x3000,0x0,0x700,0x700,0x700,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x3700,0x3700,0x3700,0x0,0x0,0x0,0x3700,0x0,0x0,0x0,0x2000000,0x0,0x0,0x3f00,0x0,0x0,0x3f00,0x3f00,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x700,0x3f00,0x0,0x3f00,0x0,0x3f00,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x7e3700,0x7c3700,0x0,0x0,0x7c0000,0x7c0700,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x700,0x0,0x700,0x0,0x0,0x0,0x0,0x3f00,0x0,0x3f00,0x3f00,0x3700,0x3000,0x0,0x700,0xf00,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x3f00,0x0,0x0,0x0,0x0,0x0,0x0,0x20000000,0x0,0x3f00,0x3f00,0x0,0x3f00,0x0,0x3f00,0x0,0x4000,0x4000,0x0,0x0,0x700,0x600,0x800,};
   }
   private static void jj_la1_1() {
      jj_la1_1 = new int[] {0xf0000000,0xf0000000,0x0,0x0,0xf0000000,0x0,0x0,0x60000000,0x0,0x1100,0x0,0x0,0x0,0x1000,0x1000,0xf0000000,0x0,0x400,0x0,0x0,0x0,0x0,0x0,0x100,0x0,0x1000,0x0,0x0,0x0,0x200,0x0,0x0,0x0,0x200,0x200,0x600,0x0,0x0,0x0,0x0,0x200,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x8,0x0,0x4100000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x100,0x0,0x400,0x20,0x4,0x3,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x2,0x1,0x3,0x4,0x0,0x0,0x0,0x4,0x0,0x4100000,0x4100000,0x4100010,0xc0,0xc0,0x0,0x4100000,0xc0,0x1,0x1,0x0,0x0,0x4fa3000,0x0,0x0,0x8000000,0x0,0x0,0xa0000,0x4f03000,0x20000,0x2000000,0x0,0x40000,0x40000,0x4100000,0x1000,0x0,0x1000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x100000,0x100000,0x100000,0x0,0x0,0x0,0x0,0x4100000,0x0,0x4100000,0x100000,0x0,0x0,0x0,0x0,0x0,0x4100000,0x4100000,0x0,0x4100000,0x0,0x4100000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,};
   }
   private static void jj_la1_2() {
      jj_la1_2 = new int[] {0x7d,0x7d,0x0,0x0,0x7d,0x0,0x400,0x0,0x800,0x300,0x800,0xd,0x800,0x100,0x100,0xd,0x70,0x1000,0x30,0x40,0x10,0x30,0x80,0x0,0x1800000,0x0,0x1800000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x18000000,0x18000000,0x4000000,0x4000000,0x1c000000,0x1c000000,0x18000000,0x18000000,0x2000000,0x2000000,0x1a000000,0x1a000000,0x18000000,0x4000000,0x2000000,0x6000000,0x6000000,0x18000000,0x6000000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x20000000,0x0,0x0,0x7fe000,0x0,0x80000000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x20000000,0x40000000,0x0,0x0,0x1800000,0x1800000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x7fe000,0x7fe000,0x7fe000,0x0,0x0,0x0,0x7fe000,0x0,0x0,0x0,0x0,0x0,0x0,0x1800000,0x0,0x0,0x1800000,0x1800000,0x0,0x0,0x0,0x0,0x800,0x0,0x0,0x7fe000,0x1800000,0x0,0x1800000,0x0,0x1800000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1800000,0x0,0x1800000,0x0,0x0,0x0,0x0,0x1800000,0x1800000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1ffe000,0x3dc000,0x7fe000,0x0,0x0,0x0,0x0,0x0,0x0,0x1ffe000,0x1ffe000,0x0,0x1ffe000,0x0,0x1ffe000,0x0,0x0,0x0,0x1800000,0x0,0x0,0x0,0x0,};
   }
   private static void jj_la1_3() {
      jj_la1_3 = new int[] {0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x10000000,0x20000000,0x0,0x10000000,0x0,0x0,0x0,0x0,0x0,0x10000000,0x0,0x0,0x10000000,0x0,0x400,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x200000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x20100,0x0,0x40000,0x0,0x8002000,0x1f,0x20,0x40,0x60,0x60,0x20,0x80,0xa0,0xa0,0x40,0x80,0xc0,0xc0,0x20,0xc0,0x0,0x0,0x0,0x0,0x300,0x80,0x400,0x0,0x0,0x0,0x0,0x1000,0x1000,0x0,0x0,0x80,0x80,0x0,0x200,0x100,0x200,0x300,0x10000,0x8800a000,0x8800a000,0x8800a000,0x0,0x0,0x8002000,0x0,0x8002000,0x0,0x80,0x0,0x0,0x108800,0x0,0x0,0x0,0x0,0x0,0x100000,0x8800,0x100000,0x0,0x0,0x80000,0x80000,0x8800a000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x2000000,0x400000,0x2400000,0x2400000,0x2000000,0x1800000,0x3800000,0x3800000,0x400000,0x1800000,0x1c00000,0x1c00000,0x2000000,0x1c00000,0x1800000,0x0,0x80000000,0x80000000,0x4000000,0x4000000,0x0,0x80000000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x4000000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x8800a000,0x0,0x0,0x0,0x0,0x8800a000,0x0,0x0,0x0,0x8800a000,0x8800a000,0x0,0x8800a000,0x0,0x8800a000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,};
   }
   private static void jj_la1_4() {
      jj_la1_4 = new int[] {0x0,0x0,0x0,0x0,0x0,0x80000000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x513c3800,0x0,0x513c3800,0x0,0x0,0x0,0x0,0x1000000,0x0,0x0,0x0,0x4000000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1000000,0x1000000,0x1000000,0x1000000,0x1000000,0x0,0x1000000,0x0,0x0,0x0,0x1000000,0x0,0x800,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1000000,0x3c3800,0x3c3800,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1000400,0x1000400,0x1000400,0x0,0x0,0x1000000,0x0,0x1000000,0x0,0x0,0x0,0x0,0x4000000,0x513c3800,0x0,0x0,0x513c3800,0x513c3800,0x0,0x4000000,0x0,0x0,0x0,0x0,0x0,0x1000400,0x513c3800,0x0,0x513c3800,0x0,0x513c3800,0x11000000,0x80000000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1000008,0x1000008,0x0,0x0,0x0,0x1000008,0x0,0x0,0x800,0x0,0x800,0x4000000,0x4000000,0x1000008,0x0,0x1000000,0x0,0xe,0x1f0,0x11000000,0x513c3800,0x11000000,0x413c3800,0x40000000,0x0,0x0,0x0,0x13c3800,0x413c3800,0x0,0x0,0x0,0x1ff,0x1ff,0x0,0x0,0x0,0x0,0x413c3c00,0x0,0x0,0x0,0x0,0x400,0x1000000,0x0,0x0,0x513c3c00,0x513c3c00,0x80000000,0x513c3c00,0x0,0x413c3c00,0x3800,0x0,0x0,0x0,0x3c0000,0x0,0x0,0x40000000,};
   }
   private static void jj_la1_5() {
      jj_la1_5 = new int[] {0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x8000,0x0,0x0,0x0,0x0,0x0,0x0,0x8000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x8000,0x0,0x0,0x0,0x8000,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x2,0x0,0x0,0x2,0x0,0x2,0x2,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x2,0x0,0x2,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x100,0x100,0x0,0x0,0x0,0x100,0x40000,0x10000,0x0,0x1,0x1,0x2a000,0x2a000,0x100,0x2a000,0x0,0x100000,0x2fc,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x800,0x1000,0x0,0x2fc,0x2fc,0x6000,0x6000,0x18000,0x18000,0x6100,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x1,0xe100,0xe100,0x0,0x6100,0x1,0x0,0x0,0x80000,0x80000,0x0,0x0,0x0,0x0,0x0,};
   }
  final private JJCalls[] jj_2_rtns = new JJCalls[13];
  private boolean jj_rescan = false;
  private int jj_gc = 0;

  public SparqlCorese(java.io.InputStream stream) {
     this(stream, null);
  }
  public SparqlCorese(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new JavaCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new SparqlCoreseTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 224; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 224; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public SparqlCorese(java.io.Reader stream) {
    jj_input_stream = new JavaCharStream(stream, 1, 1);
    token_source = new SparqlCoreseTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 224; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 224; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public SparqlCorese(SparqlCoreseTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 224; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public void ReInit(SparqlCoreseTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 224; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  final private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  static private final class LookaheadSuccess extends java.lang.Error { }
  final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  final private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }

  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

  final public Token getToken(int index) {
    Token t = lookingAhead ? jj_scanpos : token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  final private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.Vector jj_expentries = new java.util.Vector();
  private int[] jj_expentry;
  private int jj_kind = -1;
  private int[] jj_lasttokens = new int[100];
  private int jj_endpos;

  private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      boolean exists = false;
      for (java.util.Enumeration e = jj_expentries.elements(); e.hasMoreElements();) {
        int[] oldentry = (int[])(e.nextElement());
        if (oldentry.length == jj_expentry.length) {
          exists = true;
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              exists = false;
              break;
            }
          }
          if (exists) break;
        }
      }
      if (!exists) jj_expentries.addElement(jj_expentry);
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  public ParseException generateParseException() {
    jj_expentries.removeAllElements();
    boolean[] la1tokens = new boolean[187];
    for (int i = 0; i < 187; i++) {
      la1tokens[i] = false;
    }
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 224; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
          if ((jj_la1_2[i] & (1<<j)) != 0) {
            la1tokens[64+j] = true;
          }
          if ((jj_la1_3[i] & (1<<j)) != 0) {
            la1tokens[96+j] = true;
          }
          if ((jj_la1_4[i] & (1<<j)) != 0) {
            la1tokens[128+j] = true;
          }
          if ((jj_la1_5[i] & (1<<j)) != 0) {
            la1tokens[160+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 187; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.addElement(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = (int[])jj_expentries.elementAt(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  final public void enable_tracing() {
  }

  final public void disable_tracing() {
  }

  final private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 13; i++) {
    try {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
            case 1: jj_3_2(); break;
            case 2: jj_3_3(); break;
            case 3: jj_3_4(); break;
            case 4: jj_3_5(); break;
            case 5: jj_3_6(); break;
            case 6: jj_3_7(); break;
            case 7: jj_3_8(); break;
            case 8: jj_3_9(); break;
            case 9: jj_3_10(); break;
            case 10: jj_3_11(); break;
            case 11: jj_3_12(); break;
            case 12: jj_3_13(); break;
          }
        }
        p = p.next;
      } while (p != null);
      } catch(LookaheadSuccess ls) { }
    }
    jj_rescan = false;
  }

  final private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

  }
