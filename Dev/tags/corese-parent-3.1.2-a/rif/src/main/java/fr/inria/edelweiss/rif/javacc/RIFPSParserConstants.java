/* Generated By:JavaCC: Do not edit this line. RIFPSParserConstants.java */
package fr.inria.edelweiss.rif.javacc ;


/** 
 * Token literal values and constants.
 * Generated by org.javacc.parser.OtherFilesGen#start()
 */
@SuppressWarnings("all")
public interface RIFPSParserConstants {

  /** End of File. */
  int EOF = 0;
  /** RegularExpression Id. */
  int FORALL = 6;
  /** RegularExpression Id. */
  int EXISTS = 7;
  /** RegularExpression Id. */
  int AND = 8;
  /** RegularExpression Id. */
  int OR = 9;
  /** RegularExpression Id. */
  int EXTERNAL = 10;
  /** RegularExpression Id. */
  int IMPORT = 11;
  /** RegularExpression Id. */
  int PREFIX = 12;
  /** RegularExpression Id. */
  int BASE = 13;
  /** RegularExpression Id. */
  int GROUP = 14;
  /** RegularExpression Id. */
  int DOCUMENT = 15;
  /** RegularExpression Id. */
  int LIST = 16;
  /** RegularExpression Id. */
  int IF = 17;
  /** RegularExpression Id. */
  int ARROW = 18;
  /** RegularExpression Id. */
  int LEXSPACE = 19;
  /** RegularExpression Id. */
  int EQUAL = 20;
  /** RegularExpression Id. */
  int MEMBER = 21;
  /** RegularExpression Id. */
  int SUBCLASS = 22;
  /** RegularExpression Id. */
  int OPENPAR = 23;
  /** RegularExpression Id. */
  int CLOSEPAR = 24;
  /** RegularExpression Id. */
  int OPENBRACKET = 25;
  /** RegularExpression Id. */
  int CLOSEBRACKET = 26;
  /** RegularExpression Id. */
  int OPENMETA = 27;
  /** RegularExpression Id. */
  int CLOSEMETA = 28;
  /** RegularExpression Id. */
  int PIPE = 29;
  /** RegularExpression Id. */
  int COLON = 30;
  /** RegularExpression Id. */
  int PLUS = 31;
  /** RegularExpression Id. */
  int MINUS = 32;
  /** RegularExpression Id. */
  int ANGLEBRACKIRI = 33;
  /** RegularExpression Id. */
  int PREFIX_NAME = 34;
  /** RegularExpression Id. */
  int VAR = 35;
  /** RegularExpression Id. */
  int QNAME_NS = 36;
  /** RegularExpression Id. */
  int QNAME = 37;
  /** RegularExpression Id. */
  int INTEGER = 38;
  /** RegularExpression Id. */
  int DECIMAL = 39;
  /** RegularExpression Id. */
  int DOUBLE = 40;
  /** RegularExpression Id. */
  int STRING_LITERAL = 41;
  /** RegularExpression Id. */
  int LOCALNAME = 42;
  /** RegularExpression Id. */
  int LANGTAG = 43;
  /** RegularExpression Id. */
  int DIGIT = 44;
  /** RegularExpression Id. */
  int A2Z = 45;
  /** RegularExpression Id. */
  int ALPHANUM = 46;
  /** RegularExpression Id. */
  int NCCHAR1 = 47;
  /** RegularExpression Id. */
  int NCCHAR = 48;
  /** RegularExpression Id. */
  int NCNAME_PREFIX = 49;
  /** RegularExpression Id. */
  int NCNAME = 50;
  /** RegularExpression Id. */
  int VARNAME = 51;
  /** RegularExpression Id. */
  int EXPONENT = 52;
  /** RegularExpression Id. */
  int ECHAR = 53;
  /** RegularExpression Id. */
  int UCHAR = 54;
  /** RegularExpression Id. */
  int HEX = 55;
  /** RegularExpression Id. */
  int UNKNOWN = 56;

  /** Lexical state. */
  int DEFAULT = 0;

  /** Literal token values. */
  String[] tokenImage = {
    "<EOF>",
    "\" \"",
    "\"\\r\"",
    "\"\\t\"",
    "\"\\n\"",
    "\"\\f\"",
    "\"Forall\"",
    "\"Exists\"",
    "\"And\"",
    "\"Or\"",
    "\"External\"",
    "\"Import\"",
    "\"Prefix\"",
    "\"Base\"",
    "\"Group\"",
    "\"Document\"",
    "\"List\"",
    "\":-\"",
    "\"->\"",
    "\"^^\"",
    "\"=\"",
    "\"#\"",
    "\"##\"",
    "\"(\"",
    "\")\"",
    "\"[\"",
    "\"]\"",
    "\"(*\"",
    "\"*)\"",
    "\"|\"",
    "\":\"",
    "\"+\"",
    "\"-\"",
    "<ANGLEBRACKIRI>",
    "<PREFIX_NAME>",
    "<VAR>",
    "<QNAME_NS>",
    "<QNAME>",
    "<INTEGER>",
    "<DECIMAL>",
    "<DOUBLE>",
    "<STRING_LITERAL>",
    "<LOCALNAME>",
    "<LANGTAG>",
    "<DIGIT>",
    "<A2Z>",
    "<ALPHANUM>",
    "<NCCHAR1>",
    "<NCCHAR>",
    "<NCNAME_PREFIX>",
    "<NCNAME>",
    "<VARNAME>",
    "<EXPONENT>",
    "<ECHAR>",
    "<UCHAR>",
    "<HEX>",
    "<UNKNOWN>",
  };

}
