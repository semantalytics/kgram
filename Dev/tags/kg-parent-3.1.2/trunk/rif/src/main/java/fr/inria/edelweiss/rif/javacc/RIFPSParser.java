/* Generated By:JavaCC: Do not edit this line. RIFPSParser.java */
package fr.inria.edelweiss.rif.javacc ;

import fr.inria.edelweiss.rif.api.* ;
import fr.inria.edelweiss.rif.ast.* ;

import java.io.InputStream ;
import java.util.Vector ;

import org.apache.log4j.Logger ;

/**
 * Represents the RIF-BLD grammar for the Presentation Syntax (PS) and handles the abstract syntax tree building on the fly
 * @author cfollenf */
@SuppressWarnings("all")
public class RIFPSParser implements RIFPSParserConstants {

        /** The entity class in which the AST will be stored. It also includes several informations
	 * related to the whole RIF document, like imported namespaces, etc. */
        private RIFPSDocument rifdoc ;

        /** Logger from log4j */
        private static Logger logger = Logger.getLogger(RIFPSParser.class) ;

        public void setRIFDocument(RIFPSDocument rifdoc) {
                this.rifdoc = rifdoc ;
       }

        public RIFDocument parse() throws ParseException, TokenMgrError {
               Group payload = Document() ;
                if(payload == null) ; // there should be at least one import if there is no payload.
                this.rifdoc.setPayload(payload) ;
                return rifdoc ;
        }

/**** NONTERMINAL PRODUCTIONS ****/
  final public Group Document() throws ParseException {
 Group payload = null ; Annotation meta ;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case OPENMETA:
      meta = IRIMeta();
                             rifdoc.setMeta(meta) ;
      break;
    default:
      jj_la1[0] = jj_gen;
      ;
    }
    jj_consume_token(DOCUMENT);
    jj_consume_token(OPENPAR);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case BASE:
      Base();
      break;
    default:
      jj_la1[1] = jj_gen;
      ;
    }
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PREFIX:
        ;
        break;
      default:
        jj_la1[2] = jj_gen;
        break label_1;
      }
      Prefix();
    }
    label_2:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IMPORT:
        ;
        break;
      default:
        jj_la1[3] = jj_gen;
        break label_2;
      }
      Import();
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case GROUP:
    case OPENMETA:
      payload = Group();
      break;
    default:
      jj_la1[4] = jj_gen;
      ;
    }
    jj_consume_token(CLOSEPAR);
    jj_consume_token(0);
          {if (true) return payload ;}
    throw new Error("Missing return statement in function");
  }

/* The three next productions are directives. Directives affect the whole RIF document,
 * so they are not embedded in the AST */
  final public void Base() throws ParseException {
  String ns ;
    jj_consume_token(BASE);
    jj_consume_token(OPENPAR);
    ns = IRIRef();
    jj_consume_token(CLOSEPAR);
          rifdoc.setBaseNamespace(ns) ;
  }

  final public void Prefix() throws ParseException {
  Token p ; String ns ;
    jj_consume_token(PREFIX);
    jj_consume_token(OPENPAR);
    p = jj_consume_token(PREFIX_NAME);
    ns = IRIRef();
    jj_consume_token(CLOSEPAR);
          rifdoc.addPrefixedNamespace(p.image, ns) ;
  }

  final public void Import() throws ParseException {
  String loc, profile = null ;
    jj_consume_token(IMPORT);
    jj_consume_token(OPENPAR);
    loc = IRIRef();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ANGLEBRACKIRI:
      profile = IRIRef();
      break;
    default:
      jj_la1[5] = jj_gen;
      ;
    }
    jj_consume_token(CLOSEPAR);
          rifdoc.addImportedDocument(loc, profile) ;
  }

  final public Group Group() throws ParseException {
  Annotation a = null ; Group group = Group.create() ; IRule rule ; Group nested ;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case OPENMETA:
      a = IRIMeta();
                          group.setMeta(a) ;
      break;
    default:
      jj_la1[6] = jj_gen;
      ;
    }
    jj_consume_token(GROUP);
    jj_consume_token(OPENPAR);
    label_3:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case FORALL:
      case AND:
      case EXTERNAL:
      case GROUP:
      case LIST:
      case OPENMETA:
      case ANGLEBRACKIRI:
      case VAR:
      case QNAME_NS:
      case QNAME:
      case INTEGER:
      case DECIMAL:
      case DOUBLE:
      case STRING_LITERAL:
      case LOCALNAME:
        ;
        break;
      default:
        jj_la1[7] = jj_gen;
        break label_3;
      }
      if (jj_2_1(2147483647)) {
        nested = Group();
                               group.addNestedGroup(nested) ;
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case FORALL:
        case AND:
        case EXTERNAL:
        case LIST:
        case OPENMETA:
        case ANGLEBRACKIRI:
        case VAR:
        case QNAME_NS:
        case QNAME:
        case INTEGER:
        case DECIMAL:
        case DOUBLE:
        case STRING_LITERAL:
        case LOCALNAME:
          rule = Rule();
                            group.add(rule) ;
          break;
        default:
          jj_la1[8] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    }
    jj_consume_token(CLOSEPAR);
          {if (true) return group ;}
    throw new Error("Missing return statement in function");
  }

  final public IRule Rule() throws ParseException {
  IRule rule ; Annotation meta = null ;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case OPENMETA:
      meta = IRIMeta();
      break;
    default:
      jj_la1[9] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case FORALL:
            IClause c ; Var v ; Vector<Var> boundVars = new Vector<Var>() ;
      jj_consume_token(FORALL);
      label_4:
      while (true) {
        v = Var();
                                   boundVars.add(v) ;
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case VAR:
          ;
          break;
        default:
          jj_la1[10] = jj_gen;
          break label_4;
        }
      }
      jj_consume_token(OPENPAR);
      c = Clause();
      jj_consume_token(CLOSEPAR);
            Forall forall = Forall.create(boundVars, c) ; forall.setMeta(meta) ; rule = forall ;
      break;
    case AND:
    case EXTERNAL:
    case LIST:
    case OPENMETA:
    case ANGLEBRACKIRI:
    case VAR:
    case QNAME_NS:
    case QNAME:
    case INTEGER:
    case DECIMAL:
    case DOUBLE:
    case STRING_LITERAL:
    case LOCALNAME:
      rule = Clause();
      break;
    default:
      jj_la1[11] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
          {if (true) return rule ;}
    throw new Error("Missing return statement in function");
  }

  final public IClause Clause() throws ParseException {
  IClause c ; Atomic a ; Annotation meta = null ; Entailment et ;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case OPENMETA:
      meta = IRIMeta();
      break;
    default:
      jj_la1[12] = jj_gen;
      ;
    }
    if (jj_2_2(2147483647)) {
      et = Implies();
                        et.setMeta(meta) ; c = et ;
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case EXTERNAL:
      case LIST:
      case OPENMETA:
      case ANGLEBRACKIRI:
      case VAR:
      case QNAME_NS:
      case QNAME:
      case INTEGER:
      case DECIMAL:
      case DOUBLE:
      case STRING_LITERAL:
      case LOCALNAME:
        a = Atomic();
                      a.setMeta(meta) ; c = a ;
        break;
      default:
        jj_la1[13] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
     {if (true) return c ;}
    throw new Error("Missing return statement in function");
  }

  final public Entailment Implies() throws ParseException {
  IConclusion conc ; IFormula cond ;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case AND:
       And<Atomic> and = And.create() ; Atomic a ;
      jj_consume_token(AND);
      jj_consume_token(OPENPAR);
      label_5:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case EXTERNAL:
        case LIST:
        case OPENMETA:
        case ANGLEBRACKIRI:
        case VAR:
        case QNAME_NS:
        case QNAME:
        case INTEGER:
        case DECIMAL:
        case DOUBLE:
        case STRING_LITERAL:
        case LOCALNAME:
          ;
          break;
        default:
          jj_la1[14] = jj_gen;
          break label_5;
        }
        a = Atomic();
                                          and.add(a) ;
      }
      jj_consume_token(CLOSEPAR);
       conc = and ;
      break;
    case EXTERNAL:
    case LIST:
    case OPENMETA:
    case ANGLEBRACKIRI:
    case VAR:
    case QNAME_NS:
    case QNAME:
    case INTEGER:
    case DECIMAL:
    case DOUBLE:
    case STRING_LITERAL:
    case LOCALNAME:
      conc = Atomic();
      break;
    default:
      jj_la1[15] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    jj_consume_token(IF);
    cond = Formula();
     {if (true) return Entailment.create(conc, cond) ;}
    throw new Error("Missing return statement in function");
  }

  final public IFormula Formula() throws ParseException {
  IFormula f ; Annotation a = null ; Atomic at ; Predicate p ;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case OPENMETA:
      a = IRIMeta();
      break;
    default:
      jj_la1[16] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case AND:
          And<IFormula> and = And.create() ; IFormula conjFormula ;
      jj_consume_token(AND);
      jj_consume_token(OPENPAR);
      label_6:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case EXISTS:
        case AND:
        case OR:
        case EXTERNAL:
        case LIST:
        case OPENMETA:
        case ANGLEBRACKIRI:
        case VAR:
        case QNAME_NS:
        case QNAME:
        case INTEGER:
        case DECIMAL:
        case DOUBLE:
        case STRING_LITERAL:
        case LOCALNAME:
          ;
          break;
        default:
          jj_la1[17] = jj_gen;
          break label_6;
        }
        conjFormula = Formula();
                                                        and.add(conjFormula) ;
      }
      jj_consume_token(CLOSEPAR);
          and.setMeta(a) ; f = and ;
      break;
    case OR:
          Or or = Or.create() ; IFormula disjFormula ;
      jj_consume_token(OR);
      jj_consume_token(OPENPAR);
      label_7:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case EXISTS:
        case AND:
        case OR:
        case EXTERNAL:
        case LIST:
        case OPENMETA:
        case ANGLEBRACKIRI:
        case VAR:
        case QNAME_NS:
        case QNAME:
        case INTEGER:
        case DECIMAL:
        case DOUBLE:
        case STRING_LITERAL:
        case LOCALNAME:
          ;
          break;
        default:
          jj_la1[18] = jj_gen;
          break label_7;
        }
        disjFormula = Formula();
                                                       or.add(disjFormula) ;
      }
      jj_consume_token(CLOSEPAR);
          or.setMeta(a) ; f = or ;
      break;
    case EXISTS:
          Var v ; Vector<Var> boundVars = new Vector<Var>() ; IFormula existFormula ;
      jj_consume_token(EXISTS);
      label_8:
      while (true) {
        v = Var();
                                 boundVars.add(v) ;
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case VAR:
          ;
          break;
        default:
          jj_la1[19] = jj_gen;
          break label_8;
        }
      }
      jj_consume_token(OPENPAR);
      existFormula = Formula();
      jj_consume_token(CLOSEPAR);
          Exists exists = Exists.create(boundVars, existFormula) ; exists.setMeta(a) ; f = exists ;
      break;
    default:
      jj_la1[20] = jj_gen;
      if (jj_2_3(2147483647)) {
        at = Atomic();
                        at.setMeta(a) ; f = at ;
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case EXTERNAL:
          jj_consume_token(EXTERNAL);
          jj_consume_token(OPENPAR);
          p = Atom(true);
          jj_consume_token(CLOSEPAR);
                                                               p.setMeta(a) ; f = p ;
          break;
        default:
          jj_la1[21] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    }
       {if (true) return f ;}
    throw new Error("Missing return statement in function");
  }

  final public Atomic Atomic() throws ParseException {
  Atomic a ;
    if (jj_2_4(2147483647)) {
      a = Frame();
    } else if (jj_2_5(2147483647)) {
      a = BinaryOp();
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ANGLEBRACKIRI:
      case QNAME_NS:
      case QNAME:
      case INTEGER:
      case DECIMAL:
      case DOUBLE:
      case STRING_LITERAL:
      case LOCALNAME:
        a = Atom(false);
        break;
      default:
        jj_la1[22] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    {if (true) return a ;}
    throw new Error("Missing return statement in function");
  }

  final public Predicate Atom(boolean ext) throws ParseException {
  Predicate p = null ; Const c ; Term t ;
    c = Const();
    jj_consume_token(OPENPAR);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case EXTERNAL:
    case LIST:
    case OPENMETA:
    case ANGLEBRACKIRI:
    case VAR:
    case QNAME_NS:
    case QNAME:
    case INTEGER:
    case DECIMAL:
    case DOUBLE:
    case STRING_LITERAL:
    case LOCALNAME:
      if (jj_2_6(2147483647)) {
        p = NamedArgsPredicate.create(ext, c) ; String n ;
        label_9:
        while (true) {
          n = QName();
          jj_consume_token(ARROW);
          t = Term();
                                           ((NamedArgsPredicate) p).addArgument(n, t) ;
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case QNAME_NS:
          case QNAME:
            ;
            break;
          default:
            jj_la1[23] = jj_gen;
            break label_9;
          }
        }
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case EXTERNAL:
        case LIST:
        case OPENMETA:
        case ANGLEBRACKIRI:
        case VAR:
        case QNAME_NS:
        case QNAME:
        case INTEGER:
        case DECIMAL:
        case DOUBLE:
        case STRING_LITERAL:
        case LOCALNAME:
        p = PositionalPredicate.create(ext, c) ;
          label_10:
          while (true) {
            t = Term();
                     ((PositionalPredicate) p).addArgument(t) ;
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case EXTERNAL:
            case LIST:
            case OPENMETA:
            case ANGLEBRACKIRI:
            case VAR:
            case QNAME_NS:
            case QNAME:
            case INTEGER:
            case DECIMAL:
            case DOUBLE:
            case STRING_LITERAL:
            case LOCALNAME:
              ;
              break;
            default:
              jj_la1[24] = jj_gen;
              break label_10;
            }
          }
          break;
        default:
          jj_la1[25] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
      break;
    default:
      jj_la1[26] = jj_gen;
      ;
    }
    jj_consume_token(CLOSEPAR);
    {if (true) return p == null ? Predicate.create(c) : p ;}
    throw new Error("Missing return statement in function");
  }

/** This production handles the three binary operators that can be found in RIF-BLD */
  final public BinaryOp BinaryOp() throws ParseException {
  BinaryOp op ; Term left, right ; Token t ;
    left = Term();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case EQUAL:
      t = jj_consume_token(EQUAL);
      break;
    case MEMBER:
      t = jj_consume_token(MEMBER);
      break;
    case SUBCLASS:
      t = jj_consume_token(SUBCLASS);
      break;
    default:
      jj_la1[27] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    right = Term();
    switch(t.kind) {
      case EQUAL   : {if (true) return Equal.create(left, right) ;}
      case MEMBER  : {if (true) return Member.create(left, right) ;}
      case SUBCLASS: {if (true) return Subclass.create(left, right) ;}
    }
    throw new Error("Missing return statement in function");
  }

  final public Term Term() throws ParseException {
  Term t ; Annotation a = null ;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case OPENMETA:
      a = IRIMeta();
      break;
    default:
      jj_la1[28] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case EXTERNAL:
      jj_consume_token(EXTERNAL);
      jj_consume_token(OPENPAR);
      t = Expr(true);
      jj_consume_token(CLOSEPAR);
      break;
    case VAR:
      t = Var();
      break;
    default:
      jj_la1[29] = jj_gen;
      if (jj_2_7(2147483647)) {
        t = Expr(false);
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case LIST:
          t = List();
          break;
        case ANGLEBRACKIRI:
        case QNAME_NS:
        case QNAME:
        case INTEGER:
        case DECIMAL:
        case DOUBLE:
        case STRING_LITERAL:
        case LOCALNAME:
          t = Const();
          break;
        default:
          jj_la1[30] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    }
    t.setMeta(a) ; {if (true) return t ;}
    throw new Error("Missing return statement in function");
  }

  final public Function Expr(boolean ext) throws ParseException {
  Function f = null ; Const c ; Term t ;
    c = Const();
    jj_consume_token(OPENPAR);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case EXTERNAL:
    case LIST:
    case OPENMETA:
    case ANGLEBRACKIRI:
    case VAR:
    case QNAME_NS:
    case QNAME:
    case INTEGER:
    case DECIMAL:
    case DOUBLE:
    case STRING_LITERAL:
    case LOCALNAME:
      if (jj_2_8(2147483647)) {
        f = NamedArgsFunction.create(ext, c) ; String n ;
        label_11:
        while (true) {
          n = QName();
          jj_consume_token(ARROW);
          t = Term();
                                           ((NamedArgsFunction) f).addArgument(n, t) ;
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case QNAME_NS:
          case QNAME:
            ;
            break;
          default:
            jj_la1[31] = jj_gen;
            break label_11;
          }
        }
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case EXTERNAL:
        case LIST:
        case OPENMETA:
        case ANGLEBRACKIRI:
        case VAR:
        case QNAME_NS:
        case QNAME:
        case INTEGER:
        case DECIMAL:
        case DOUBLE:
        case STRING_LITERAL:
        case LOCALNAME:
        f = PositionalFunction.create(ext, c) ;
          label_12:
          while (true) {
            t = Term();
                     ((PositionalFunction) f).addArgument(t) ;
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case EXTERNAL:
            case LIST:
            case OPENMETA:
            case ANGLEBRACKIRI:
            case VAR:
            case QNAME_NS:
            case QNAME:
            case INTEGER:
            case DECIMAL:
            case DOUBLE:
            case STRING_LITERAL:
            case LOCALNAME:
              ;
              break;
            default:
              jj_la1[32] = jj_gen;
              break label_12;
            }
          }
          break;
        default:
          jj_la1[33] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
      break;
    default:
      jj_la1[34] = jj_gen;
      ;
    }
    jj_consume_token(CLOSEPAR);
    {if (true) return f == null ? Function.create(c) : f ;}
    throw new Error("Missing return statement in function");
  }

  final public List List() throws ParseException {
  List l ; Vector<Term> terms = new Vector<Term>() ; Term t, tail ;
    jj_consume_token(LIST);
    jj_consume_token(OPENPAR);
    if (jj_2_9(2147483647)) {
      label_13:
      while (true) {
        t = Term();
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case EXTERNAL:
        case LIST:
        case OPENMETA:
        case ANGLEBRACKIRI:
        case VAR:
        case QNAME_NS:
        case QNAME:
        case INTEGER:
        case DECIMAL:
        case DOUBLE:
        case STRING_LITERAL:
        case LOCALNAME:
          ;
          break;
        default:
          jj_la1[35] = jj_gen;
          break label_13;
        }
      }
      jj_consume_token(PIPE);
      tail = Term();
                                                 l = OpenList.create(terms, tail) ;
    } else {
      label_14:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case EXTERNAL:
        case LIST:
        case OPENMETA:
        case ANGLEBRACKIRI:
        case VAR:
        case QNAME_NS:
        case QNAME:
        case INTEGER:
        case DECIMAL:
        case DOUBLE:
        case STRING_LITERAL:
        case LOCALNAME:
          ;
          break;
        default:
          jj_la1[36] = jj_gen;
          break label_14;
        }
        t = Term();
                       terms.add(t) ;
      }
                                             l = List.create(terms) ;
    }
    jj_consume_token(CLOSEPAR);
    {if (true) return l ;}
    throw new Error("Missing return statement in function");
  }

  final public Var Var() throws ParseException {
  Token t ;
    t = jj_consume_token(VAR);
     {if (true) return Var.create(t.image.substring(1, t.image.length())) ;}
    throw new Error("Missing return statement in function");
  }

  final public Const Const() throws ParseException {
  Const c ; Token v ; String t ;
    if (jj_2_10(2147483647)) {
      v = jj_consume_token(STRING_LITERAL);
      jj_consume_token(LEXSPACE);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ANGLEBRACKIRI:
        t = IRIRef();
        break;
      case QNAME_NS:
      case QNAME:
        t = QName();
        break;
      default:
        jj_la1[37] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
                                                                         c = Const.create(v.image.substring(1, v.image.length() - 1), t) ;
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ANGLEBRACKIRI:
      case QNAME_NS:
      case QNAME:
      case INTEGER:
      case DECIMAL:
      case DOUBLE:
      case STRING_LITERAL:
      case LOCALNAME:
        c = Constshort();
        break;
      default:
        jj_la1[38] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    {if (true) return c ;}
    throw new Error("Missing return statement in function");
  }

  final public Const Constshort() throws ParseException {
  Const c ; Token t, l ; String s ;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ANGLEBRACKIRI:
    case QNAME_NS:
    case QNAME:
      c = IRIConstshort();
      break;
    case INTEGER:
    case DECIMAL:
    case DOUBLE:
      c = NumericLiteral();
      break;
    case LOCALNAME:
      t = jj_consume_token(LOCALNAME);
                          c = Const.create(t.image.substring(1, t.image.length()), RIF.LOCAL) ;
      break;
    case STRING_LITERAL:
      t = jj_consume_token(STRING_LITERAL);
          c = Const.create(EscapeUtils.unescape(t.image.substring(1, t.image.length() - 1)), RIF.xsdstring) ;
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LANGTAG:
        l = jj_consume_token(LANGTAG);
                        c = Const.create(EscapeUtils.unescape(t.image.substring(1, t.image.length() - 1)) + l.image, RIF.RDF_PLAIN_LITERAL,
                                                l.image.substring(1, l.image.length())) ;
        break;
      default:
        jj_la1[39] = jj_gen;
        ;
      }
      break;
    default:
      jj_la1[40] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    {if (true) return c ;}
    throw new Error("Missing return statement in function");
  }

  final public Const IRIConstshort() throws ParseException {
  String s ;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ANGLEBRACKIRI:
      s = IRIRef();
                   {if (true) return Const.create(s, RIF.IRI) ;}
      break;
    case QNAME_NS:
    case QNAME:
      s = QName();
                  {if (true) return Const.create(s, RIF.IRI) ;}
      break;
    default:
      jj_la1[41] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public Const NumericLiteral() throws ParseException {
  Token lit ;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case INTEGER:
      lit = jj_consume_token(INTEGER);
                          {if (true) return Const.create(lit.image, RIF.xsdinteger) ;}
      break;
    case DECIMAL:
      lit = jj_consume_token(DECIMAL);
                          {if (true) return Const.create(lit.image, RIF.xsddecimal) ;}
      break;
    case DOUBLE:
      lit = jj_consume_token(DOUBLE);
                          {if (true) return Const.create(lit.image, RIF.xsddouble) ;}
      break;
    default:
      jj_la1[42] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

/** There is a tricky workaround in this production, to handle the ambiguity.
 *  We have to keep several choices in order to prevent upstream lookaheads from failing,
 *  because they won't perform the local ones, hence failing when they run into the first
 *  IRIConst they meet whithout checking if it belongs to a Frame object identifier.
 *  This solution is for sure awkward, but... sigh */
  final public Annotation IRIMeta() throws ParseException {
  Annotation a = null ; Frame meta ; And<Frame> frameConj ; Const identifier = null ;
    if (jj_2_11(2147483647)) {
      jj_consume_token(OPENMETA);
      jj_consume_token(CLOSEMETA);
                                  a = Annotation.create() ;
    } else if (jj_2_12(2147483647)) {
      jj_consume_token(OPENMETA);
      identifier = IRIConst();
      jj_consume_token(CLOSEMETA);
                                                          a = Annotation.create(identifier) ;
    } else if (jj_2_13(2147483647)) {
      jj_consume_token(OPENMETA);
      identifier = IRIConst();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case EXTERNAL:
      case LIST:
      case OPENMETA:
      case ANGLEBRACKIRI:
      case VAR:
      case QNAME_NS:
      case QNAME:
      case INTEGER:
      case DECIMAL:
      case DOUBLE:
      case STRING_LITERAL:
      case LOCALNAME:
        meta = Frame();
                          a = Annotation.create(identifier, meta) ;
        break;
      case AND:
           frameConj = And.create() ; Frame f ;
        jj_consume_token(AND);
        jj_consume_token(OPENPAR);
        label_15:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case EXTERNAL:
          case LIST:
          case OPENMETA:
          case ANGLEBRACKIRI:
          case VAR:
          case QNAME_NS:
          case QNAME:
          case INTEGER:
          case DECIMAL:
          case DOUBLE:
          case STRING_LITERAL:
          case LOCALNAME:
            ;
            break;
          default:
            jj_la1[43] = jj_gen;
            break label_15;
          }
          f = Frame();
                                             frameConj.add(f) ;
        }
        jj_consume_token(CLOSEPAR);
                                                                                    a = Annotation.create(identifier, frameConj) ;
        break;
      default:
        jj_la1[44] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      jj_consume_token(CLOSEMETA);
    } else if (jj_2_14(2147483647)) {
      jj_consume_token(OPENMETA);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case EXTERNAL:
      case LIST:
      case OPENMETA:
      case ANGLEBRACKIRI:
      case VAR:
      case QNAME_NS:
      case QNAME:
      case INTEGER:
      case DECIMAL:
      case DOUBLE:
      case STRING_LITERAL:
      case LOCALNAME:
        meta = Frame();
                          a = Annotation.create(meta) ;
        break;
      case AND:
           frameConj = And.create() ; Frame f ;
        jj_consume_token(AND);
        jj_consume_token(OPENPAR);
        label_16:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case EXTERNAL:
          case LIST:
          case OPENMETA:
          case ANGLEBRACKIRI:
          case VAR:
          case QNAME_NS:
          case QNAME:
          case INTEGER:
          case DECIMAL:
          case DOUBLE:
          case STRING_LITERAL:
          case LOCALNAME:
            ;
            break;
          default:
            jj_la1[45] = jj_gen;
            break label_16;
          }
          f = Frame();
                                             frameConj.add(f) ;
        }
        jj_consume_token(CLOSEPAR);
                                                                                    a = Annotation.create(frameConj) ;
        break;
      default:
        jj_la1[46] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      jj_consume_token(CLOSEMETA);
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
       {if (true) return a ;}
    throw new Error("Missing return statement in function");
  }

  final public Frame Frame() throws ParseException {
  Term objId, att, val ; Frame f ;
    objId = Term();
      f = Frame.create(objId) ;
    jj_consume_token(OPENBRACKET);
    label_17:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case EXTERNAL:
      case LIST:
      case OPENMETA:
      case ANGLEBRACKIRI:
      case VAR:
      case QNAME_NS:
      case QNAME:
      case INTEGER:
      case DECIMAL:
      case DOUBLE:
      case STRING_LITERAL:
      case LOCALNAME:
        ;
        break;
      default:
        jj_la1[47] = jj_gen;
        break label_17;
      }
      att = Term();
      jj_consume_token(ARROW);
      val = Term();
        f.addAttValPair(att, val) ;
    }
    jj_consume_token(CLOSEBRACKET);
      {if (true) return f ;}
    throw new Error("Missing return statement in function");
  }

  final public String IRIRef() throws ParseException {
  Token t ;
    t = jj_consume_token(ANGLEBRACKIRI);
     {if (true) return t.image.substring(1, t.image.length() - 1) ;}
    throw new Error("Missing return statement in function");
  }

/** Weird production, because we have to check within the datatype
 *  to ensure that it is a rif:iri constant */
  final public Const IRIConst() throws ParseException {
  String iri, dt ; Token t ; Const c ;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ANGLEBRACKIRI:
    case QNAME_NS:
    case QNAME:
      c = IRIConstshort();
      break;
    case STRING_LITERAL:
      t = jj_consume_token(STRING_LITERAL);
      jj_consume_token(LEXSPACE);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ANGLEBRACKIRI:
        dt = IRIRef();
        break;
      case QNAME_NS:
      case QNAME:
        dt = QName();
        break;
      default:
        jj_la1[48] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
                                                                          c = Const.create(t.image.substring(1, t.image.length() - 1), dt) ;
      break;
    default:
      jj_la1[49] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    {if (true) return c ;}
    throw new Error("Missing return statement in function");
  }

/** This production should return the expanded URI, and throw an exception
 *  when the prefix used was not declared in the present RIF document */
  final public String QName() throws ParseException {
  Token qName ;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case QNAME:
      qName = jj_consume_token(QNAME);
      break;
    case QNAME_NS:
      qName = jj_consume_token(QNAME_NS);
      break;
    default:
      jj_la1[50] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
          {if (true) return qName.image ;}
    throw new Error("Missing return statement in function");
  }

  private boolean jj_2_1(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  private boolean jj_2_2(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_2(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  private boolean jj_2_3(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_3(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(2, xla); }
  }

  private boolean jj_2_4(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_4(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(3, xla); }
  }

  private boolean jj_2_5(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_5(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(4, xla); }
  }

  private boolean jj_2_6(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_6(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(5, xla); }
  }

  private boolean jj_2_7(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_7(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(6, xla); }
  }

  private boolean jj_2_8(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_8(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(7, xla); }
  }

  private boolean jj_2_9(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_9(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(8, xla); }
  }

  private boolean jj_2_10(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_10(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(9, xla); }
  }

  private boolean jj_2_11(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_11(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(10, xla); }
  }

  private boolean jj_2_12(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_12(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(11, xla); }
  }

  private boolean jj_2_13(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_13(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(12, xla); }
  }

  private boolean jj_2_14(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_14(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(13, xla); }
  }

  private boolean jj_3R_48() {
    if (jj_3R_31()) return true;
    return false;
  }

  private boolean jj_3R_47() {
    if (jj_3R_64()) return true;
    return false;
  }

  private boolean jj_3R_41() {
    if (jj_scan_token(STRING_LITERAL)) return true;
    if (jj_scan_token(LEXSPACE)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_57()) {
    jj_scanpos = xsp;
    if (jj_3R_58()) return true;
    }
    return false;
  }

  private boolean jj_3_3() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_20()) {
    jj_scanpos = xsp;
    if (jj_3R_21()) return true;
    }
    return false;
  }

  private boolean jj_3R_20() {
    if (jj_3R_22()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(20)) {
    jj_scanpos = xsp;
    if (jj_scan_token(21)) {
    jj_scanpos = xsp;
    if (jj_scan_token(22)) {
    jj_scanpos = xsp;
    if (jj_scan_token(25)) return true;
    }
    }
    }
    return false;
  }

  private boolean jj_3R_40() {
    if (jj_3R_56()) return true;
    return false;
  }

  private boolean jj_3R_46() {
    if (jj_3R_63()) return true;
    return false;
  }

  private boolean jj_3R_26() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_40()) {
    jj_scanpos = xsp;
    if (jj_3R_41()) return true;
    }
    return false;
  }

  private boolean jj_3R_30() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_46()) {
    jj_scanpos = xsp;
    if (jj_3R_47()) {
    jj_scanpos = xsp;
    if (jj_3R_48()) return true;
    }
    }
    return false;
  }

  private boolean jj_3R_78() {
    if (jj_3R_63()) return true;
    return false;
  }

  private boolean jj_3R_27() {
    if (jj_3R_22()) return true;
    if (jj_scan_token(OPENBRACKET)) return true;
    return false;
  }

  private boolean jj_3R_76() {
    if (jj_scan_token(ANGLEBRACKIRI)) return true;
    return false;
  }

  private boolean jj_3R_77() {
    if (jj_3R_63()) return true;
    return false;
  }

  private boolean jj_3R_28() {
    if (jj_3R_22()) return true;
    if (jj_scan_token(OPENBRACKET)) return true;
    return false;
  }

  private boolean jj_3R_79() {
    if (jj_3R_22()) return true;
    if (jj_scan_token(ARROW)) return true;
    if (jj_3R_22()) return true;
    return false;
  }

  private boolean jj_3R_63() {
    if (jj_3R_22()) return true;
    if (jj_scan_token(OPENBRACKET)) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_79()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(CLOSEBRACKET)) return true;
    return false;
  }

  private boolean jj_3_14() {
    if (jj_scan_token(OPENMETA)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_28()) {
    jj_scanpos = xsp;
    if (jj_scan_token(8)) return true;
    }
    return false;
  }

  private boolean jj_3R_62() {
    if (jj_scan_token(AND)) return true;
    if (jj_scan_token(OPENPAR)) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_78()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(CLOSEPAR)) return true;
    return false;
  }

  private boolean jj_3R_61() {
    if (jj_3R_63()) return true;
    return false;
  }

  private boolean jj_3_13() {
    if (jj_scan_token(OPENMETA)) return true;
    if (jj_3R_26()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_27()) {
    jj_scanpos = xsp;
    if (jj_scan_token(8)) return true;
    }
    return false;
  }

  private boolean jj_3_12() {
    if (jj_scan_token(OPENMETA)) return true;
    if (jj_3R_26()) return true;
    if (jj_scan_token(CLOSEMETA)) return true;
    return false;
  }

  private boolean jj_3R_60() {
    if (jj_scan_token(AND)) return true;
    if (jj_scan_token(OPENPAR)) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_77()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(CLOSEPAR)) return true;
    return false;
  }

  private boolean jj_3_11() {
    if (jj_scan_token(OPENMETA)) return true;
    if (jj_scan_token(CLOSEMETA)) return true;
    return false;
  }

  private boolean jj_3R_45() {
    if (jj_scan_token(OPENMETA)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_61()) {
    jj_scanpos = xsp;
    if (jj_3R_62()) return true;
    }
    if (jj_scan_token(CLOSEMETA)) return true;
    return false;
  }

  private boolean jj_3R_59() {
    if (jj_3R_63()) return true;
    return false;
  }

  private boolean jj_3_2() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_19()) {
    jj_scanpos = xsp;
    if (jj_scan_token(8)) return true;
    }
    return false;
  }

  private boolean jj_3R_19() {
    if (jj_3R_30()) return true;
    if (jj_scan_token(IF)) return true;
    return false;
  }

  private boolean jj_3R_70() {
    if (jj_3R_23()) return true;
    return false;
  }

  private boolean jj_3R_44() {
    if (jj_scan_token(OPENMETA)) return true;
    if (jj_3R_26()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_59()) {
    jj_scanpos = xsp;
    if (jj_3R_60()) return true;
    }
    if (jj_scan_token(CLOSEMETA)) return true;
    return false;
  }

  private boolean jj_3R_43() {
    if (jj_scan_token(OPENMETA)) return true;
    if (jj_3R_26()) return true;
    if (jj_scan_token(CLOSEMETA)) return true;
    return false;
  }

  private boolean jj_3R_42() {
    if (jj_scan_token(OPENMETA)) return true;
    if (jj_scan_token(CLOSEMETA)) return true;
    return false;
  }

  private boolean jj_3R_29() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_42()) {
    jj_scanpos = xsp;
    if (jj_3R_43()) {
    jj_scanpos = xsp;
    if (jj_3R_44()) {
    jj_scanpos = xsp;
    if (jj_3R_45()) return true;
    }
    }
    }
    return false;
  }

  private boolean jj_3R_69() {
    if (jj_3R_76()) return true;
    return false;
  }

  private boolean jj_3R_92() {
    if (jj_scan_token(DOUBLE)) return true;
    return false;
  }

  private boolean jj_3R_91() {
    if (jj_scan_token(DECIMAL)) return true;
    return false;
  }

  private boolean jj_3R_90() {
    if (jj_scan_token(INTEGER)) return true;
    return false;
  }

  private boolean jj_3R_88() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_90()) {
    jj_scanpos = xsp;
    if (jj_3R_91()) {
    jj_scanpos = xsp;
    if (jj_3R_92()) return true;
    }
    }
    return false;
  }

  private boolean jj_3R_18() {
    if (jj_3R_29()) return true;
    return false;
  }

  private boolean jj_3_1() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_18()) jj_scanpos = xsp;
    if (jj_scan_token(GROUP)) return true;
    return false;
  }

  private boolean jj_3R_75() {
    if (jj_3R_23()) return true;
    return false;
  }

  private boolean jj_3R_56() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_74()) {
    jj_scanpos = xsp;
    if (jj_3R_75()) return true;
    }
    return false;
  }

  private boolean jj_3R_74() {
    if (jj_3R_76()) return true;
    return false;
  }

  private boolean jj_3R_89() {
    if (jj_scan_token(LANGTAG)) return true;
    return false;
  }

  private boolean jj_3R_87() {
    if (jj_scan_token(STRING_LITERAL)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_89()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_86() {
    if (jj_scan_token(LOCALNAME)) return true;
    return false;
  }

  private boolean jj_3R_85() {
    if (jj_3R_88()) return true;
    return false;
  }

  private boolean jj_3R_84() {
    if (jj_3R_56()) return true;
    return false;
  }

  private boolean jj_3_10() {
    if (jj_scan_token(STRING_LITERAL)) return true;
    if (jj_scan_token(LEXSPACE)) return true;
    return false;
  }

  private boolean jj_3R_71() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_84()) {
    jj_scanpos = xsp;
    if (jj_3R_85()) {
    jj_scanpos = xsp;
    if (jj_3R_86()) {
    jj_scanpos = xsp;
    if (jj_3R_87()) return true;
    }
    }
    }
    return false;
  }

  private boolean jj_3R_53() {
    if (jj_3R_71()) return true;
    return false;
  }

  private boolean jj_3R_52() {
    if (jj_scan_token(STRING_LITERAL)) return true;
    if (jj_scan_token(LEXSPACE)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_69()) {
    jj_scanpos = xsp;
    if (jj_3R_70()) return true;
    }
    return false;
  }

  private boolean jj_3R_38() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_52()) {
    jj_scanpos = xsp;
    if (jj_3R_53()) return true;
    }
    return false;
  }

  private boolean jj_3R_25() {
    if (jj_3R_22()) return true;
    return false;
  }

  private boolean jj_3_9() {
    Token xsp;
    if (jj_3R_25()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_25()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(PIPE)) return true;
    return false;
  }

  private boolean jj_3R_50() {
    if (jj_scan_token(VAR)) return true;
    return false;
  }

  private boolean jj_3R_83() {
    if (jj_3R_22()) return true;
    return false;
  }

  private boolean jj_3R_82() {
    if (jj_3R_22()) return true;
    return false;
  }

  private boolean jj_3R_68() {
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_83()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_67() {
    Token xsp;
    if (jj_3R_82()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_82()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(PIPE)) return true;
    if (jj_3R_22()) return true;
    return false;
  }

  private boolean jj_3_8() {
    if (jj_3R_23()) return true;
    if (jj_scan_token(ARROW)) return true;
    return false;
  }

  private boolean jj_3R_51() {
    if (jj_scan_token(LIST)) return true;
    if (jj_scan_token(OPENPAR)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_67()) {
    jj_scanpos = xsp;
    if (jj_3R_68()) return true;
    }
    if (jj_scan_token(CLOSEPAR)) return true;
    return false;
  }

  private boolean jj_3R_73() {
    if (jj_3R_22()) return true;
    return false;
  }

  private boolean jj_3R_21() {
    if (jj_3R_31()) return true;
    return false;
  }

  private boolean jj_3R_72() {
    if (jj_3R_23()) return true;
    if (jj_scan_token(ARROW)) return true;
    if (jj_3R_22()) return true;
    return false;
  }

  private boolean jj_3R_55() {
    Token xsp;
    if (jj_3R_73()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_73()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_39() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_54()) {
    jj_scanpos = xsp;
    if (jj_3R_55()) return true;
    }
    return false;
  }

  private boolean jj_3R_54() {
    Token xsp;
    if (jj_3R_72()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_72()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3_7() {
    if (jj_3R_24()) return true;
    return false;
  }

  private boolean jj_3R_24() {
    if (jj_3R_38()) return true;
    if (jj_scan_token(OPENPAR)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_39()) jj_scanpos = xsp;
    if (jj_scan_token(CLOSEPAR)) return true;
    return false;
  }

  private boolean jj_3R_58() {
    if (jj_3R_23()) return true;
    return false;
  }

  private boolean jj_3R_37() {
    if (jj_3R_38()) return true;
    return false;
  }

  private boolean jj_3R_36() {
    if (jj_3R_51()) return true;
    return false;
  }

  private boolean jj_3R_35() {
    if (jj_3R_24()) return true;
    return false;
  }

  private boolean jj_3R_34() {
    if (jj_3R_50()) return true;
    return false;
  }

  private boolean jj_3R_33() {
    if (jj_scan_token(EXTERNAL)) return true;
    if (jj_scan_token(OPENPAR)) return true;
    if (jj_3R_24()) return true;
    if (jj_scan_token(CLOSEPAR)) return true;
    return false;
  }

  private boolean jj_3R_32() {
    if (jj_3R_29()) return true;
    return false;
  }

  private boolean jj_3R_22() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_32()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_33()) {
    jj_scanpos = xsp;
    if (jj_3R_34()) {
    jj_scanpos = xsp;
    if (jj_3R_35()) {
    jj_scanpos = xsp;
    if (jj_3R_36()) {
    jj_scanpos = xsp;
    if (jj_3R_37()) return true;
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_57() {
    if (jj_3R_76()) return true;
    return false;
  }

  private boolean jj_3_6() {
    if (jj_3R_23()) return true;
    if (jj_scan_token(ARROW)) return true;
    return false;
  }

  private boolean jj_3R_64() {
    if (jj_3R_22()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(20)) {
    jj_scanpos = xsp;
    if (jj_scan_token(21)) {
    jj_scanpos = xsp;
    if (jj_scan_token(22)) return true;
    }
    }
    if (jj_3R_22()) return true;
    return false;
  }

  private boolean jj_3R_81() {
    if (jj_3R_22()) return true;
    return false;
  }

  private boolean jj_3R_80() {
    if (jj_3R_23()) return true;
    if (jj_scan_token(ARROW)) return true;
    if (jj_3R_22()) return true;
    return false;
  }

  private boolean jj_3R_66() {
    Token xsp;
    if (jj_3R_81()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_81()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_49() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_65()) {
    jj_scanpos = xsp;
    if (jj_3R_66()) return true;
    }
    return false;
  }

  private boolean jj_3R_65() {
    Token xsp;
    if (jj_3R_80()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_80()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_23() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(37)) {
    jj_scanpos = xsp;
    if (jj_scan_token(36)) return true;
    }
    return false;
  }

  private boolean jj_3_5() {
    if (jj_3R_22()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(20)) {
    jj_scanpos = xsp;
    if (jj_scan_token(21)) {
    jj_scanpos = xsp;
    if (jj_scan_token(22)) return true;
    }
    }
    return false;
  }

  private boolean jj_3_4() {
    if (jj_3R_22()) return true;
    if (jj_scan_token(OPENBRACKET)) return true;
    return false;
  }

  private boolean jj_3R_31() {
    if (jj_3R_38()) return true;
    if (jj_scan_token(OPENPAR)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_49()) jj_scanpos = xsp;
    if (jj_scan_token(CLOSEPAR)) return true;
    return false;
  }

  /** Generated Token Manager. */
  public RIFPSParserTokenManager token_source;
  JavaCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private Token jj_scanpos, jj_lastpos;
  private int jj_la;
  private int jj_gen;
  final private int[] jj_la1 = new int[51];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x8000000,0x2000,0x1000,0x800,0x8004000,0x0,0x8000000,0x8014540,0x8010540,0x8000000,0x0,0x8010540,0x8000000,0x8010400,0x8010400,0x8010500,0x8000000,0x8010780,0x8010780,0x0,0x380,0x400,0x0,0x0,0x8010400,0x8010400,0x8010400,0x700000,0x8000000,0x400,0x10000,0x0,0x8010400,0x8010400,0x8010400,0x8010400,0x8010400,0x0,0x0,0x0,0x0,0x0,0x0,0x8010400,0x8010500,0x8010400,0x8010500,0x8010400,0x0,0x0,0x0,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x0,0x0,0x0,0x0,0x0,0x2,0x0,0x7fa,0x7fa,0x0,0x8,0x7fa,0x0,0x7fa,0x7fa,0x7fa,0x0,0x7fa,0x7fa,0x8,0x0,0x0,0x7f2,0x30,0x7fa,0x7fa,0x7fa,0x0,0x0,0x8,0x7f2,0x30,0x7fa,0x7fa,0x7fa,0x7fa,0x7fa,0x32,0x7f2,0x800,0x7f2,0x32,0x1c0,0x7fa,0x7fa,0x7fa,0x7fa,0x7fa,0x32,0x232,0x30,};
   }
  final private JJCalls[] jj_2_rtns = new JJCalls[14];
  private boolean jj_rescan = false;
  private int jj_gc = 0;

  /** Constructor with InputStream. */
  public RIFPSParser(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public RIFPSParser(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new JavaCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new RIFPSParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 51; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 51; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor. */
  public RIFPSParser(java.io.Reader stream) {
    jj_input_stream = new JavaCharStream(stream, 1, 1);
    token_source = new RIFPSParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 51; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 51; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor with generated Token Manager. */
  public RIFPSParser(RIFPSParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 51; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(RIFPSParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 51; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  static private final class LookaheadSuccess extends java.lang.Error { }
  final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.List jj_expentries = new java.util.ArrayList();
  private int[] jj_expentry;
  private int jj_kind = -1;
  private int[] jj_lasttokens = new int[100];
  private int jj_endpos;

  private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      jj_entries_loop: for (java.util.Iterator it = jj_expentries.iterator(); it.hasNext();) {
        int[] oldentry = (int[])(it.next());
        if (oldentry.length == jj_expentry.length) {
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              continue jj_entries_loop;
            }
          }
          jj_expentries.add(jj_expentry);
          break jj_entries_loop;
        }
      }
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[57];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 51; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 57; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = (int[])jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

  private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 14; i++) {
    try {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
            case 1: jj_3_2(); break;
            case 2: jj_3_3(); break;
            case 3: jj_3_4(); break;
            case 4: jj_3_5(); break;
            case 5: jj_3_6(); break;
            case 6: jj_3_7(); break;
            case 7: jj_3_8(); break;
            case 8: jj_3_9(); break;
            case 9: jj_3_10(); break;
            case 10: jj_3_11(); break;
            case 11: jj_3_12(); break;
            case 12: jj_3_13(); break;
            case 13: jj_3_14(); break;
          }
        }
        p = p.next;
      } while (p != null);
      } catch(LookaheadSuccess ls) { }
    }
    jj_rescan = false;
  }

  private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

}
