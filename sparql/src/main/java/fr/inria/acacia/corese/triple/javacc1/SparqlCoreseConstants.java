/* Generated By:JavaCC: Do not edit this line. SparqlCoreseConstants.java */
package fr.inria.acacia.corese.triple.javacc1;

public interface SparqlCoreseConstants {

  int EOF = 0;
  int WS = 6;
  int SINGLE_LINE_COMMENT = 7;
  int Q_IRIref = 8;
  int QNAME_NS = 9;
  int QNAME = 10;
  int BLANK_NODE_LABEL = 11;
  int VAR1 = 12;
  int VAR2 = 13;
  int LANGTAG = 14;
  int A2Z = 15;
  int A2ZN = 16;
  int KW_A = 17;
  int INV = 18;
  int SHORT = 19;
  int SHORTALL = 20;
  int DEPTH = 21;
  int BREADTH = 22;
  int BASE = 23;
  int PREFIX = 24;
  int SELECT = 25;
  int DESCRIBE = 26;
  int CONSTRUCT = 27;
  int ASK = 28;
  int DISTINCT = 29;
  int SEPARATOR = 30;
  int REDUCED = 31;
  int LIMIT = 32;
  int OFFSET = 33;
  int ORDER = 34;
  int BY = 35;
  int ANY = 36;
  int RELAX = 37;
  int ASC = 38;
  int DESC = 39;
  int NAMED = 40;
  int FROM = 41;
  int WHERE = 42;
  int AND = 43;
  int GRAPH = 44;
  int SERVICE = 45;
  int REC = 46;
  int STATE = 47;
  int LEAF = 48;
  int OPTIONAL = 49;
  int UNION = 50;
  int MINUSP = 51;
  int NOT = 52;
  int SCOPE = 53;
  int FORALL = 54;
  int IF = 55;
  int THEN = 56;
  int ELSE = 57;
  int EXIST = 58;
  int FILTER = 59;
  int LOAD = 60;
  int CLEAR = 61;
  int DROP = 62;
  int CREATE = 63;
  int ADD = 64;
  int TO = 65;
  int MOVE = 66;
  int COPY = 67;
  int INSERT = 68;
  int DELETE = 69;
  int WITH = 70;
  int USING = 71;
  int DEFAUT = 72;
  int ALL = 73;
  int INTO = 74;
  int SILENT = 75;
  int DATA = 76;
  int BOUND = 77;
  int STR = 78;
  int DTYPE = 79;
  int LANG = 80;
  int LANGMATCHES = 81;
  int IS_URI = 82;
  int IS_IRI = 83;
  int IS_BLANK = 84;
  int IS_LITERAL = 85;
  int REGEX = 86;
  int TRUE = 87;
  int FALSE = 88;
  int ONE = 89;
  int S_MORE = 90;
  int LIST = 91;
  int MERGE = 92;
  int DISPLAY = 93;
  int PRAGMA = 94;
  int D_RDF = 95;
  int D_JSON = 96;
  int D_FLAT = 97;
  int D_ASQUERY = 98;
  int D_XML = 99;
  int D_BLANK = 100;
  int THRESHOLD = 101;
  int RESULT = 102;
  int PROJECTION = 103;
  int GROUP = 104;
  int HAVING = 105;
  int BINDINGS = 106;
  int BIND = 107;
  int UNDEF = 108;
  int COUNT = 109;
  int SOURCE = 110;
  int SCORE = 111;
  int AS = 112;
  int SORT = 113;
  int REVERSE = 114;
  int OR = 115;
  int OPTION = 116;
  int SORTED = 117;
  int ALL2 = 118;
  int CURRENT = 119;
  int ONE2 = 120;
  int DIRECT2 = 121;
  int COLON2 = 122;
  int DISTANCE = 123;
  int DEBUG = 124;
  int NOSORT = 125;
  int TUPLE = 126;
  int XPATH = 127;
  int IN = 128;
  int EQ2 = 129;
  int NE2 = 130;
  int BEGIN_WITH = 131;
  int STRICT_SPEC = 132;
  int SPEC = 133;
  int SAME = 134;
  int GENERALISATION = 135;
  int STRICT_GENERALISATION = 136;
  int EQ_LANG = 137;
  int SIMPLE_STRING = 138;
  int INTEGER = 139;
  int DECIMAL = 140;
  int DOUBLE = 141;
  int EXPONENT = 142;
  int QUOTE_3D = 143;
  int QUOTE_3S = 144;
  int ECHAR = 145;
  int STRING_LITERAL1 = 146;
  int STRING_LITERAL2 = 147;
  int STRING_LITERAL_LONG1 = 148;
  int STRING_LITERAL_LONG2 = 149;
  int DIGITS = 150;
  int HEX = 151;
  int LPAREN = 152;
  int RPAREN = 153;
  int LBRACE = 154;
  int RBRACE = 155;
  int LBRACKET = 156;
  int RBRACKET = 157;
  int ANON = 158;
  int SEMICOLON = 159;
  int COMMA = 160;
  int DOT = 161;
  int EQ = 162;
  int NE = 163;
  int GT = 164;
  int LT = 165;
  int LE = 166;
  int GE = 167;
  int BANG = 168;
  int TILDE = 169;
  int COLON = 170;
  int SC_OR = 171;
  int SC_AND = 172;
  int PLUS = 173;
  int MINUS = 174;
  int STAR = 175;
  int SLASH = 176;
  int QM = 177;
  int BAR = 178;
  int DATATYPE = 179;
  int AT = 180;
  int NCCHAR1p = 181;
  int NCCHAR1 = 182;
  int NCCHAR = 183;
  int NCNAME_PREFIX = 184;
  int NCNAME = 185;
  int VARNAME = 186;

  int DEFAULT = 0;

  String[] tokenImage = {
    "<EOF>",
    "\" \"",
    "\"\\t\"",
    "\"\\n\"",
    "\"\\r\"",
    "\"\\f\"",
    "<WS>",
    "<SINGLE_LINE_COMMENT>",
    "<Q_IRIref>",
    "<QNAME_NS>",
    "<QNAME>",
    "<BLANK_NODE_LABEL>",
    "<VAR1>",
    "<VAR2>",
    "<LANGTAG>",
    "<A2Z>",
    "<A2ZN>",
    "\"a\"",
    "\"i\"",
    "\"s\"",
    "\"sa\"",
    "\"d\"",
    "\"b\"",
    "\"base\"",
    "\"prefix\"",
    "\"select\"",
    "\"describe\"",
    "\"construct\"",
    "\"ask\"",
    "\"distinct\"",
    "\"separator\"",
    "\"reduced\"",
    "\"limit\"",
    "\"offset\"",
    "\"order\"",
    "\"by\"",
    "\"any\"",
    "\"relax\"",
    "\"asc\"",
    "\"desc\"",
    "\"named\"",
    "\"from\"",
    "\"where\"",
    "\"and\"",
    "\"graph\"",
    "\"service\"",
    "\"rec\"",
    "\"state\"",
    "\"leaf\"",
    "\"optional\"",
    "\"union\"",
    "\"minus\"",
    "\"not\"",
    "\"scope\"",
    "\"forall\"",
    "\"iff\"",
    "\"then\"",
    "\"else\"",
    "\"exists\"",
    "\"filter\"",
    "\"load\"",
    "\"clear\"",
    "\"drop\"",
    "\"create\"",
    "\"add\"",
    "\"to\"",
    "\"move\"",
    "\"copy\"",
    "\"insert\"",
    "\"delete\"",
    "\"with\"",
    "\"using\"",
    "\"default\"",
    "\"all\"",
    "\"into\"",
    "\"silent\"",
    "\"data\"",
    "\"bound\"",
    "\"str\"",
    "\"datatype\"",
    "\"lang\"",
    "\"langmatches\"",
    "\"isURI\"",
    "\"isIRI\"",
    "\"isBlank\"",
    "\"isLiteral\"",
    "\"regex\"",
    "\"true\"",
    "\"false\"",
    "\"one\"",
    "\"more\"",
    "\"list\"",
    "\"merge\"",
    "\"display\"",
    "\"pragma\"",
    "\"rdf\"",
    "\"json\"",
    "\"flat\"",
    "\"asquery\"",
    "\"xml\"",
    "\"blank\"",
    "\"threshold\"",
    "\"result\"",
    "\"projection\"",
    "\"group\"",
    "\"having\"",
    "\"bindings\"",
    "\"bind\"",
    "\"undef\"",
    "\"count\"",
    "\"source\"",
    "\"score\"",
    "\"as\"",
    "\"sort\"",
    "\"reverse\"",
    "\"or\"",
    "\"option\"",
    "\"sorted\"",
    "\"all::\"",
    "\"current::\"",
    "\"one::\"",
    "\"direct::\"",
    "\"::\"",
    "\"distance\"",
    "\"debug\"",
    "\"nosort\"",
    "\"tuple\"",
    "\"xpath\"",
    "\"in\"",
    "\"==\"",
    "\"!==\"",
    "\"^\"",
    "\"<:\"",
    "\"<=:\"",
    "\"=:\"",
    "\">=:\"",
    "\">:\"",
    "\"~=\"",
    "<SIMPLE_STRING>",
    "<INTEGER>",
    "<DECIMAL>",
    "<DOUBLE>",
    "<EXPONENT>",
    "\"\\\"\\\"\\\"\"",
    "\"\\\'\\\'\\\'\"",
    "<ECHAR>",
    "<STRING_LITERAL1>",
    "<STRING_LITERAL2>",
    "<STRING_LITERAL_LONG1>",
    "<STRING_LITERAL_LONG2>",
    "<DIGITS>",
    "<HEX>",
    "\"(\"",
    "\")\"",
    "\"{\"",
    "\"}\"",
    "\"[\"",
    "\"]\"",
    "<ANON>",
    "\";\"",
    "\",\"",
    "\".\"",
    "\"=\"",
    "\"!=\"",
    "\">\"",
    "\"<\"",
    "\"<=\"",
    "\">=\"",
    "\"!\"",
    "\"~\"",
    "\":\"",
    "\"||\"",
    "\"&&\"",
    "\"+\"",
    "\"-\"",
    "\"*\"",
    "\"/\"",
    "\"?\"",
    "\"|\"",
    "\"^^\"",
    "\"@\"",
    "<NCCHAR1p>",
    "<NCCHAR1>",
    "<NCCHAR>",
    "<NCNAME_PREFIX>",
    "<NCNAME>",
    "<VARNAME>",
  };

}
